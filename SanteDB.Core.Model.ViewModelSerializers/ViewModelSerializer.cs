//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SanteDB.Core.Model.Json.Formatter
{
    using SanteDB.Core.Model;


    /// <summary>Serializes <see cref="SanteDB.Core.Model.NonVersionedEntityData"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class NonVersionedEntityDataViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(NonVersionedEntityDataViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.NonVersionedEntityData);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.NonVersionedEntityData _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.NonVersionedEntityData)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.NonVersionedEntityData)));
            }
            if (context.ShouldSerialize("updatedTime"))
            {
                if ((_strong.UpdatedTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy"))
            {
                if ((_strong.UpdatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.NonVersionedEntityData _retVal = new SanteDB.Core.Model.NonVersionedEntityData();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("updatedBy".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.UpdatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("updatedTime".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.UpdatedTimeXml = ((string)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("$type".Equals(r.Value))
                                                    {
                                                        System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                        if ((_type != typeof(SanteDB.Core.Model.NonVersionedEntityData)))
                                                        {
                                                            SanteDB.Core.Model.NonVersionedEntityData _nretVal = ((SanteDB.Core.Model.NonVersionedEntityData)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                            _nretVal.CopyObjectData(_retVal);
                                                            return _nretVal;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        r.Skip();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Subscription.SubscriptionDefinition"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class SubscriptionDefinitionViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(SubscriptionDefinitionViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Subscription.SubscriptionDefinition);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Subscription.SubscriptionDefinition _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Subscription.SubscriptionDefinition)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Subscription.SubscriptionDefinition)));
            }
            if (context.ShouldSerialize("uuid"))
            {
                context.JsonContext.WritePropertyUtil(w, "uuid", _strong.Uuid, context);
            }
            if (context.ShouldSerialize("modifiedOn"))
            {
                context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
            }
            if (context.ShouldSerialize("definitions"))
            {
                if (((_strong.ClientDefinitions == null)
                            || (_strong.ClientDefinitions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "definitions", _strong.ClientDefinitions, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Subscription.SubscriptionDefinition _retVal = new SanteDB.Core.Model.Subscription.SubscriptionDefinition();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("definitions".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Subscription.SubscriptionClientDefinition>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("definitions", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ClientDefinitions = ((System.Collections.Generic.List<SanteDB.Core.Model.Subscription.SubscriptionClientDefinition>)(_instance));
                                }
                            }
                            else
                            {
                                if ("uuid".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Guid), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("uuid", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.Uuid = ((System.Guid)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("$type".Equals(r.Value))
                                    {
                                        System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                        if ((_type != typeof(SanteDB.Core.Model.Subscription.SubscriptionDefinition)))
                                        {
                                            SanteDB.Core.Model.Subscription.SubscriptionDefinition _nretVal = ((SanteDB.Core.Model.Subscription.SubscriptionDefinition)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                            _nretVal.CopyObjectData(_retVal);
                                            return _nretVal;
                                        }
                                    }
                                    else
                                    {
                                        r.Skip();
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Security.SecurityApplication"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class SecurityApplicationViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(SecurityApplicationViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Security.SecurityApplication);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Security.SecurityApplication _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Security.SecurityApplication)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Security.SecurityApplication)));
            }
            if (context.ShouldSerialize("applicationSecret"))
            {
                if ((_strong.ApplicationSecret == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "applicationSecret", _strong.ApplicationSecret, context);
                }
            }
            if (context.ShouldSerialize("name"))
            {
                if ((_strong.Name == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("lockout"))
            {
                if ((_strong.LockoutXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "lockout", _strong.LockoutXml, context);
                }
            }
            if (context.ShouldSerialize("invalidAuth"))
            {
                if ((_strong.InvalidAuthAttempts == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "invalidAuth", _strong.InvalidAuthAttempts, context);
                }
            }
            if (context.ShouldSerialize("lastAuthenticationTime"))
            {
                if ((_strong.LastAuthenticationXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "lastAuthenticationTime", _strong.LastAuthenticationXml, context);
                }
            }
            if (context.ShouldSerialize("updatedTime"))
            {
                if ((_strong.UpdatedTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy"))
            {
                if ((_strong.UpdatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Security.SecurityApplication _retVal = new SanteDB.Core.Model.Security.SecurityApplication();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("updatedBy".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.UpdatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("updatedTime".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.UpdatedTimeXml = ((string)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("lastAuthenticationTime".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("lastAuthenticationTime", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.LastAuthenticationXml = ((string)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("invalidAuth".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<int>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("invalidAuth", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.InvalidAuthAttempts = ((System.Nullable<int>)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("lockout".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("lockout", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.LockoutXml = ((string)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("name".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.Name = ((string)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("applicationSecret".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("applicationSecret", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.ApplicationSecret = ((string)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("$type".Equals(r.Value))
                                                                        {
                                                                            System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                            if ((_type != typeof(SanteDB.Core.Model.Security.SecurityApplication)))
                                                                            {
                                                                                SanteDB.Core.Model.Security.SecurityApplication _nretVal = ((SanteDB.Core.Model.Security.SecurityApplication)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                _nretVal.CopyObjectData(_retVal);
                                                                                return _nretVal;
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            r.Skip();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Security.SecurityChallenge"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class SecurityChallengeViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(SecurityChallengeViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Security.SecurityChallenge);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Security.SecurityChallenge _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Security.SecurityChallenge)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Security.SecurityChallenge)));
            }
            if (context.ShouldSerialize("text"))
            {
                if ((_strong.ChallengeText == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "text", _strong.ChallengeText, context);
                }
            }
            if (context.ShouldSerialize("updatedTime"))
            {
                if ((_strong.UpdatedTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy"))
            {
                if ((_strong.UpdatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Security.SecurityChallenge _retVal = new SanteDB.Core.Model.Security.SecurityChallenge();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("updatedBy".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.UpdatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("updatedTime".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.UpdatedTimeXml = ((string)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("text".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("text", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.ChallengeText = ((string)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("$type".Equals(r.Value))
                                                        {
                                                            System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                            if ((_type != typeof(SanteDB.Core.Model.Security.SecurityChallenge)))
                                                            {
                                                                SanteDB.Core.Model.Security.SecurityChallenge _nretVal = ((SanteDB.Core.Model.Security.SecurityChallenge)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                _nretVal.CopyObjectData(_retVal);
                                                                return _nretVal;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            r.Skip();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Security.SecurityDevice"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class SecurityDeviceViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(SecurityDeviceViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Security.SecurityDevice);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Security.SecurityDevice _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Security.SecurityDevice)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Security.SecurityDevice)));
            }
            if (context.ShouldSerialize("deviceSecret"))
            {
                if ((_strong.DeviceSecret == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "deviceSecret", _strong.DeviceSecret, context);
                }
            }
            if (context.ShouldSerialize("publicKey"))
            {
                if ((_strong.PublicKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "publicKey", _strong.PublicKey, context);
                }
            }
            if (context.ShouldSerialize("name"))
            {
                if ((_strong.Name == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("lockout"))
            {
                if ((_strong.LockoutXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "lockout", _strong.LockoutXml, context);
                }
            }
            if (context.ShouldSerialize("invalidAuth"))
            {
                if ((_strong.InvalidAuthAttempts == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "invalidAuth", _strong.InvalidAuthAttempts, context);
                }
            }
            if (context.ShouldSerialize("lastAuthenticationTime"))
            {
                if ((_strong.LastAuthenticationXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "lastAuthenticationTime", _strong.LastAuthenticationXml, context);
                }
            }
            if (context.ShouldSerialize("updatedTime"))
            {
                if ((_strong.UpdatedTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy"))
            {
                if ((_strong.UpdatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Security.SecurityDevice _retVal = new SanteDB.Core.Model.Security.SecurityDevice();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("updatedBy".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.UpdatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("updatedTime".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.UpdatedTimeXml = ((string)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("lastAuthenticationTime".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("lastAuthenticationTime", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.LastAuthenticationXml = ((string)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("invalidAuth".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<int>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("invalidAuth", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.InvalidAuthAttempts = ((System.Nullable<int>)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("lockout".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("lockout", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.LockoutXml = ((string)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("name".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.Name = ((string)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("publicKey".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("publicKey", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.PublicKey = ((string)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("deviceSecret".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("deviceSecret", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.DeviceSecret = ((string)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("$type".Equals(r.Value))
                                                                            {
                                                                                System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                if ((_type != typeof(SanteDB.Core.Model.Security.SecurityDevice)))
                                                                                {
                                                                                    SanteDB.Core.Model.Security.SecurityDevice _nretVal = ((SanteDB.Core.Model.Security.SecurityDevice)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                    _nretVal.CopyObjectData(_retVal);
                                                                                    return _nretVal;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                r.Skip();
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Security.SecurityEntity"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class SecurityEntityViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(SecurityEntityViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Security.SecurityEntity);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Security.SecurityEntity _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Security.SecurityEntity)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Security.SecurityEntity)));
            }
            if (context.ShouldSerialize("updatedTime"))
            {
                if ((_strong.UpdatedTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy"))
            {
                if ((_strong.UpdatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Security.SecurityEntity _retVal = new SanteDB.Core.Model.Security.SecurityEntity();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("updatedBy".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.UpdatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("updatedTime".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.UpdatedTimeXml = ((string)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("$type".Equals(r.Value))
                                                    {
                                                        System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                        if ((_type != typeof(SanteDB.Core.Model.Security.SecurityEntity)))
                                                        {
                                                            SanteDB.Core.Model.Security.SecurityEntity _nretVal = ((SanteDB.Core.Model.Security.SecurityEntity)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                            _nretVal.CopyObjectData(_retVal);
                                                            return _nretVal;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        r.Skip();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Security.SecurityPolicy"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class SecurityPolicyViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(SecurityPolicyViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Security.SecurityPolicy);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Security.SecurityPolicy _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Security.SecurityPolicy)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Security.SecurityPolicy)));
            }
            if (context.ShouldSerialize("handler"))
            {
                if ((_strong.Handler == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "handler", _strong.Handler, context);
                }
            }
            if (context.ShouldSerialize("name"))
            {
                if ((_strong.Name == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("oid"))
            {
                if ((_strong.Oid == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "oid", _strong.Oid, context);
                }
            }
            if (context.ShouldSerialize("isPublic"))
            {
                context.JsonContext.WritePropertyUtil(w, "isPublic", _strong.IsPublic, context);
            }
            if (context.ShouldSerialize("canOverride"))
            {
                context.JsonContext.WritePropertyUtil(w, "canOverride", _strong.CanOverride, context);
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Security.SecurityPolicy _retVal = new SanteDB.Core.Model.Security.SecurityPolicy();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("canOverride".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(bool), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("canOverride", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.CanOverride = ((bool)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("isPublic".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(bool), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("isPublic", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.IsPublic = ((bool)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("oid".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("oid", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.Oid = ((string)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("name".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.Name = ((string)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("handler".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("handler", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Handler = ((string)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("$type".Equals(r.Value))
                                                                {
                                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                    if ((_type != typeof(SanteDB.Core.Model.Security.SecurityPolicy)))
                                                                    {
                                                                        SanteDB.Core.Model.Security.SecurityPolicy _nretVal = ((SanteDB.Core.Model.Security.SecurityPolicy)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                        _nretVal.CopyObjectData(_retVal);
                                                                        return _nretVal;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    r.Skip();
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Security.SecurityPolicyInstance"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class SecurityPolicyInstanceViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(SecurityPolicyInstanceViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Security.SecurityPolicyInstance);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Security.SecurityPolicyInstance _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Security.SecurityPolicyInstance)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Security.SecurityPolicyInstance)));
            }
            if (context.ShouldSerialize("policy"))
            {
                if ((_strong.PolicyKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.PolicyKey, context);
                }
            }
            if (context.ShouldSerialize("grant"))
            {
                context.JsonContext.WritePropertyUtil(w, "grant", _strong.GrantType, context);
            }
            if (context.ShouldSerialize("modifiedOn"))
            {
                context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
            }
            if (context.ShouldSerialize("source"))
            {
                if ((_strong.SourceEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Security.SecurityPolicyInstance _retVal = new SanteDB.Core.Model.Security.SecurityPolicyInstance();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("source".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.SourceEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("grant".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.Security.PolicyGrantType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("grant", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.GrantType = ((SanteDB.Core.Model.Security.PolicyGrantType)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("policy".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.PolicyKey = ((System.Nullable<System.Guid>)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("$type".Equals(r.Value))
                                        {
                                            System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                            if ((_type != typeof(SanteDB.Core.Model.Security.SecurityPolicyInstance)))
                                            {
                                                SanteDB.Core.Model.Security.SecurityPolicyInstance _nretVal = ((SanteDB.Core.Model.Security.SecurityPolicyInstance)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                _nretVal.CopyObjectData(_retVal);
                                                return _nretVal;
                                            }
                                        }
                                        else
                                        {
                                            r.Skip();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Security.SecurityProvenance"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class SecurityProvenanceViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(SecurityProvenanceViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Security.SecurityProvenance);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Security.SecurityProvenance _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Security.SecurityProvenance)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Security.SecurityProvenance)));
            }
            if (context.ShouldSerialize("modifiedOn"))
            {
                context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("application"))
            {
                if ((_strong.ApplicationKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "application", _strong.ApplicationKey, context);
                }
            }
            if (context.ShouldSerialize("user"))
            {
                if ((_strong.UserKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "user", _strong.UserKey, context);
                }
            }
            if (context.ShouldSerialize("device"))
            {
                if ((_strong.DeviceKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "device", _strong.DeviceKey, context);
                }
            }
            if (context.ShouldSerialize("session"))
            {
                if ((_strong.SessionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "session", _strong.SessionKey, context);
                }
            }
            if (context.ShouldSerialize("extern"))
            {
                if ((_strong.ExternalSecurityObjectRefKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extern", _strong.ExternalSecurityObjectRefKey, context);
                }
            }
            if (context.ShouldSerialize("externClass"))
            {
                if ((_strong.ExternalSecurityObjectRefType == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "externClass", _strong.ExternalSecurityObjectRefType, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Security.SecurityProvenance _retVal = new SanteDB.Core.Model.Security.SecurityProvenance();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("externClass".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("externClass", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ExternalSecurityObjectRefType = ((string)(_instance));
                                }
                            }
                            else
                            {
                                if ("extern".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extern", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.ExternalSecurityObjectRefKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("session".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("session", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.SessionKey = ((System.Nullable<System.Guid>)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("device".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("device", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.DeviceKey = ((System.Nullable<System.Guid>)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("user".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("user", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.UserKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("application".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("application", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.ApplicationKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("creationTime".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.CreationTimeXml = ((string)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("$type".Equals(r.Value))
                                                        {
                                                            System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                            if ((_type != typeof(SanteDB.Core.Model.Security.SecurityProvenance)))
                                                            {
                                                                SanteDB.Core.Model.Security.SecurityProvenance _nretVal = ((SanteDB.Core.Model.Security.SecurityProvenance)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                _nretVal.CopyObjectData(_retVal);
                                                                return _nretVal;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            r.Skip();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Security.SecurityRole"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class SecurityRoleViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(SecurityRoleViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Security.SecurityRole);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Security.SecurityRole _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Security.SecurityRole)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Security.SecurityRole)));
            }
            if (context.ShouldSerialize("name"))
            {
                if ((_strong.Name == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("description"))
            {
                if ((_strong.Description == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "description", _strong.Description, context);
                }
            }
            if (context.ShouldSerialize("updatedTime"))
            {
                if ((_strong.UpdatedTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy"))
            {
                if ((_strong.UpdatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Security.SecurityRole _retVal = new SanteDB.Core.Model.Security.SecurityRole();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("updatedBy".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.UpdatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("updatedTime".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.UpdatedTimeXml = ((string)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("description".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("description", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.Description = ((string)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("name".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.Name = ((string)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("$type".Equals(r.Value))
                                                            {
                                                                System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                if ((_type != typeof(SanteDB.Core.Model.Security.SecurityRole)))
                                                                {
                                                                    SanteDB.Core.Model.Security.SecurityRole _nretVal = ((SanteDB.Core.Model.Security.SecurityRole)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                    _nretVal.CopyObjectData(_retVal);
                                                                    return _nretVal;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                r.Skip();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Security.SecurityUser"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class SecurityUserViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(SecurityUserViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Security.SecurityUser);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Security.SecurityUser _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Security.SecurityUser)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Security.SecurityUser)));
            }
            if (context.ShouldSerialize("email"))
            {
                if ((_strong.Email == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "email", _strong.Email, context);
                }
            }
            if (context.ShouldSerialize("emailConfirmed"))
            {
                context.JsonContext.WritePropertyUtil(w, "emailConfirmed", _strong.EmailConfirmed, context);
            }
            if (context.ShouldSerialize("invalidLoginAttempts"))
            {
                context.JsonContext.WritePropertyUtil(w, "invalidLoginAttempts", _strong.InvalidLoginAttempts, context);
            }
            if (context.ShouldSerialize("lockout"))
            {
                if ((_strong.LockoutXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "lockout", _strong.LockoutXml, context);
                }
            }
            if (context.ShouldSerialize("password"))
            {
                if ((_strong.Password == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "password", _strong.Password, context);
                }
            }
            if (context.ShouldSerialize("securityStamp"))
            {
                if ((_strong.SecurityHash == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "securityStamp", _strong.SecurityHash, context);
                }
            }
            if (context.ShouldSerialize("twoFactorEnabled"))
            {
                context.JsonContext.WritePropertyUtil(w, "twoFactorEnabled", _strong.TwoFactorEnabled, context);
            }
            if (context.ShouldSerialize("userName"))
            {
                if ((_strong.UserName == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "userName", _strong.UserName, context);
                }
            }
            if (context.ShouldSerialize("photo"))
            {
                if ((_strong.UserPhoto == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "photo", _strong.UserPhoto, context);
                }
            }
            if (context.ShouldSerialize("lastLoginTime"))
            {
                if ((_strong.LastLoginTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "lastLoginTime", _strong.LastLoginTimeXml, context);
                }
            }
            if (context.ShouldSerialize("passwordExpiry"))
            {
                if ((_strong.PasswordExpirationXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "passwordExpiry", _strong.PasswordExpirationXml, context);
                }
            }
            if (context.ShouldSerialize("phoneNumber"))
            {
                if ((_strong.PhoneNumber == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "phoneNumber", _strong.PhoneNumber, context);
                }
            }
            if (context.ShouldSerialize("phoneNumberConfirmed"))
            {
                context.JsonContext.WritePropertyUtil(w, "phoneNumberConfirmed", _strong.PhoneNumberConfirmed, context);
            }
            if (context.ShouldSerialize("twoFactorMechanism"))
            {
                context.JsonContext.WritePropertyUtil(w, "twoFactorMechanism", _strong.TwoFactorMechnaismKey, context);
            }
            if (context.ShouldSerialize("userClass"))
            {
                context.JsonContext.WritePropertyUtil(w, "userClass", _strong.UserClass, context);
            }
            if (context.ShouldSerialize("updatedTime"))
            {
                if ((_strong.UpdatedTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy"))
            {
                if ((_strong.UpdatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Security.SecurityUser _retVal = new SanteDB.Core.Model.Security.SecurityUser();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("updatedBy".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.UpdatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("updatedTime".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.UpdatedTimeXml = ((string)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("userClass".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Guid), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("userClass", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.UserClass = ((System.Guid)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("twoFactorMechanism".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Guid), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("twoFactorMechanism", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.TwoFactorMechnaismKey = ((System.Guid)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("phoneNumberConfirmed".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(bool), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("phoneNumberConfirmed", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.PhoneNumberConfirmed = ((bool)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("phoneNumber".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("phoneNumber", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.PhoneNumber = ((string)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("passwordExpiry".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("passwordExpiry", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.PasswordExpirationXml = ((string)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("lastLoginTime".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("lastLoginTime", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.LastLoginTimeXml = ((string)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("photo".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(byte[]), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("photo", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.UserPhoto = ((byte[])(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("userName".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("userName", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.UserName = ((string)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("twoFactorEnabled".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(bool), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("twoFactorEnabled", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.TwoFactorEnabled = ((bool)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("securityStamp".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("securityStamp", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.SecurityHash = ((string)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("password".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("password", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.Password = ((string)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("lockout".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("lockout", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.LockoutXml = ((string)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("invalidLoginAttempts".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(int), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("invalidLoginAttempts", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.InvalidLoginAttempts = ((int)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("emailConfirmed".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(bool), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("emailConfirmed", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.EmailConfirmed = ((bool)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("email".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("email", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.Email = ((string)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("$type".Equals(r.Value))
                                                                                                                {
                                                                                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                    if ((_type != typeof(SanteDB.Core.Model.Security.SecurityUser)))
                                                                                                                    {
                                                                                                                        SanteDB.Core.Model.Security.SecurityUser _nretVal = ((SanteDB.Core.Model.Security.SecurityUser)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                        _nretVal.CopyObjectData(_retVal);
                                                                                                                        return _nretVal;
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    r.Skip();
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Roles.Patient"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class PatientViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(PatientViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Roles.Patient);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Roles.Patient _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Roles.Patient)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Roles.Patient)));
            }
            if (context.ShouldSerialize("deceasedDate"))
            {
                if ((_strong.DeceasedDateXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "deceasedDate", _strong.DeceasedDateXml, context);
                }
            }
            if (context.ShouldSerialize("deceasedDatePrecision"))
            {
                if ((_strong.DeceasedDatePrecision == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "deceasedDatePrecision", _strong.DeceasedDatePrecision, context);
                }
            }
            if (context.ShouldSerialize("multipleBirthOrder"))
            {
                if ((_strong.MultipleBirthOrder == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "multipleBirthOrder", _strong.MultipleBirthOrder, context);
                }
            }
            if (context.ShouldSerialize("vipStatus"))
            {
                if ((_strong.VipStatusKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "vipStatus", _strong.VipStatusKey, context);
                }
            }
            if (context.ShouldSerialize("maritalStatus"))
            {
                if ((_strong.MaritalStatusKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "maritalStatus", _strong.MaritalStatusKey, context);
                }
            }
            if (context.ShouldSerialize("educationLevel"))
            {
                if ((_strong.EducationLevelKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "educationLevel", _strong.EducationLevelKey, context);
                }
            }
            if (context.ShouldSerialize("livingArrangement"))
            {
                if ((_strong.LivingArrangementKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "livingArrangement", _strong.LivingArrangementKey, context);
                }
            }
            if (context.ShouldSerialize("religion"))
            {
                if ((_strong.ReligiousAffiliationKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "religion", _strong.ReligiousAffiliationKey, context);
                }
            }
            if (context.ShouldSerialize("nationality"))
            {
                if ((_strong.NationalityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "nationality", _strong.NationalityKey, context);
                }
            }
            if (context.ShouldSerialize("ethnicity"))
            {
                if ((_strong.EthnicGroupKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "ethnicity", _strong.EthnicGroupKey, context);
                }
            }
            if (context.ShouldSerialize("dateOfBirthPrecision"))
            {
                if ((_strong.DateOfBirthPrecision == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "dateOfBirthPrecision", _strong.DateOfBirthPrecision, context);
                }
            }
            if (context.ShouldSerialize("genderConcept"))
            {
                if ((_strong.GenderConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "genderConcept", _strong.GenderConceptKey, context);
                }
            }
            if (context.ShouldSerialize("dateOfBirth"))
            {
                if ((_strong.DateOfBirthXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "dateOfBirth", _strong.DateOfBirthXml, context);
                }
            }
            if (context.ShouldSerialize("language"))
            {
                if (((_strong.LanguageCommunication == null)
                            || (_strong.LanguageCommunication.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "language", _strong.LanguageCommunication, context);
                }
            }
            if (context.ShouldSerialize("occupation"))
            {
                if ((_strong.OccupationKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "occupation", _strong.OccupationKey, context);
                }
            }
            if (context.ShouldSerialize("address"))
            {
                if (((_strong.Addresses == null)
                            || (_strong.Addresses.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("creationAct"))
            {
                if ((_strong.CreationActKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationAct", _strong.CreationActKey, context);
                }
            }
            if (context.ShouldSerialize("determinerConcept"))
            {
                if ((_strong.DeterminerConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "determinerConcept", _strong.DeterminerConceptKey, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("name"))
            {
                if (((_strong.Names == null)
                            || (_strong.Names.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("telecom"))
            {
                if (((_strong.Telecoms == null)
                            || (_strong.Telecoms.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                }
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Roles.Patient _retVal = new SanteDB.Core.Model.Roles.Patient();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("policy".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("typeConcept".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("template".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("telecom".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("telecom", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Telecoms = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("tag".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("statusConcept".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("participation".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("note".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("name".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.Names = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("identifier".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("extension".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("determinerConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.DeterminerConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("creationAct".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationAct", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.CreationActKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("classConcept".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("address".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("address", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.Addresses = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("occupation".Equals(r.Value))
                                                                                                                            {
                                                                                                                                r.Read();
                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("occupation", context.JsonContext, _retVal, context));
                                                                                                                                if ((_instance != null))
                                                                                                                                {
                                                                                                                                    _retVal.OccupationKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ("language".Equals(r.Value))
                                                                                                                                {
                                                                                                                                    r.Read();
                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.PersonLanguageCommunication>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("language", context.JsonContext, _retVal, context));
                                                                                                                                    if ((_instance != null))
                                                                                                                                    {
                                                                                                                                        _retVal.LanguageCommunication = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.PersonLanguageCommunication>)(_instance));
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    if ("dateOfBirth".Equals(r.Value))
                                                                                                                                    {
                                                                                                                                        r.Read();
                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("dateOfBirth", context.JsonContext, _retVal, context));
                                                                                                                                        if ((_instance != null))
                                                                                                                                        {
                                                                                                                                            _retVal.DateOfBirthXml = ((string)(_instance));
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        if ("genderConcept".Equals(r.Value))
                                                                                                                                        {
                                                                                                                                            r.Read();
                                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("genderConcept", context.JsonContext, _retVal, context));
                                                                                                                                            if ((_instance != null))
                                                                                                                                            {
                                                                                                                                                _retVal.GenderConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                        {
                                                                                                                                            if ("dateOfBirthPrecision".Equals(r.Value))
                                                                                                                                            {
                                                                                                                                                r.Read();
                                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<SanteDB.Core.Model.DataTypes.DatePrecision>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("dateOfBirthPrecision", context.JsonContext, _retVal, context));
                                                                                                                                                if ((_instance != null))
                                                                                                                                                {
                                                                                                                                                    _retVal.DateOfBirthPrecision = ((System.Nullable<SanteDB.Core.Model.DataTypes.DatePrecision>)(_instance));
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                                if ("ethnicity".Equals(r.Value))
                                                                                                                                                {
                                                                                                                                                    r.Read();
                                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("ethnicity", context.JsonContext, _retVal, context));
                                                                                                                                                    if ((_instance != null))
                                                                                                                                                    {
                                                                                                                                                        _retVal.EthnicGroupKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else
                                                                                                                                                {
                                                                                                                                                    if ("nationality".Equals(r.Value))
                                                                                                                                                    {
                                                                                                                                                        r.Read();
                                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("nationality", context.JsonContext, _retVal, context));
                                                                                                                                                        if ((_instance != null))
                                                                                                                                                        {
                                                                                                                                                            _retVal.NationalityKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else
                                                                                                                                                    {
                                                                                                                                                        if ("religion".Equals(r.Value))
                                                                                                                                                        {
                                                                                                                                                            r.Read();
                                                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("religion", context.JsonContext, _retVal, context));
                                                                                                                                                            if ((_instance != null))
                                                                                                                                                            {
                                                                                                                                                                _retVal.ReligiousAffiliationKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        else
                                                                                                                                                        {
                                                                                                                                                            if ("livingArrangement".Equals(r.Value))
                                                                                                                                                            {
                                                                                                                                                                r.Read();
                                                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("livingArrangement", context.JsonContext, _retVal, context));
                                                                                                                                                                if ((_instance != null))
                                                                                                                                                                {
                                                                                                                                                                    _retVal.LivingArrangementKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            else
                                                                                                                                                            {
                                                                                                                                                                if ("educationLevel".Equals(r.Value))
                                                                                                                                                                {
                                                                                                                                                                    r.Read();
                                                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("educationLevel", context.JsonContext, _retVal, context));
                                                                                                                                                                    if ((_instance != null))
                                                                                                                                                                    {
                                                                                                                                                                        _retVal.EducationLevelKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                else
                                                                                                                                                                {
                                                                                                                                                                    if ("maritalStatus".Equals(r.Value))
                                                                                                                                                                    {
                                                                                                                                                                        r.Read();
                                                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("maritalStatus", context.JsonContext, _retVal, context));
                                                                                                                                                                        if ((_instance != null))
                                                                                                                                                                        {
                                                                                                                                                                            _retVal.MaritalStatusKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                    else
                                                                                                                                                                    {
                                                                                                                                                                        if ("vipStatus".Equals(r.Value))
                                                                                                                                                                        {
                                                                                                                                                                            r.Read();
                                                                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("vipStatus", context.JsonContext, _retVal, context));
                                                                                                                                                                            if ((_instance != null))
                                                                                                                                                                            {
                                                                                                                                                                                _retVal.VipStatusKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        else
                                                                                                                                                                        {
                                                                                                                                                                            if ("multipleBirthOrder".Equals(r.Value))
                                                                                                                                                                            {
                                                                                                                                                                                r.Read();
                                                                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<int>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("multipleBirthOrder", context.JsonContext, _retVal, context));
                                                                                                                                                                                if ((_instance != null))
                                                                                                                                                                                {
                                                                                                                                                                                    _retVal.MultipleBirthOrder = ((System.Nullable<int>)(_instance));
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            else
                                                                                                                                                                            {
                                                                                                                                                                                if ("deceasedDatePrecision".Equals(r.Value))
                                                                                                                                                                                {
                                                                                                                                                                                    r.Read();
                                                                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<SanteDB.Core.Model.DataTypes.DatePrecision>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("deceasedDatePrecision", context.JsonContext, _retVal, context));
                                                                                                                                                                                    if ((_instance != null))
                                                                                                                                                                                    {
                                                                                                                                                                                        _retVal.DeceasedDatePrecision = ((System.Nullable<SanteDB.Core.Model.DataTypes.DatePrecision>)(_instance));
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                                else
                                                                                                                                                                                {
                                                                                                                                                                                    if ("deceasedDate".Equals(r.Value))
                                                                                                                                                                                    {
                                                                                                                                                                                        r.Read();
                                                                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("deceasedDate", context.JsonContext, _retVal, context));
                                                                                                                                                                                        if ((_instance != null))
                                                                                                                                                                                        {
                                                                                                                                                                                            _retVal.DeceasedDateXml = ((string)(_instance));
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                    else
                                                                                                                                                                                    {
                                                                                                                                                                                        if ("$type".Equals(r.Value))
                                                                                                                                                                                        {
                                                                                                                                                                                            System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                                                            if ((_type != typeof(SanteDB.Core.Model.Roles.Patient)))
                                                                                                                                                                                            {
                                                                                                                                                                                                SanteDB.Core.Model.Roles.Patient _nretVal = ((SanteDB.Core.Model.Roles.Patient)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                                                                _nretVal.CopyObjectData(_retVal);
                                                                                                                                                                                                return _nretVal;
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                        else
                                                                                                                                                                                        {
                                                                                                                                                                                            r.Skip();
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Roles.Provider"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ProviderViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(ProviderViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Roles.Provider);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Roles.Provider _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Roles.Provider)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Roles.Provider)));
            }
            if (context.ShouldSerialize("providerSpecialty"))
            {
                if ((_strong.SpecialtyKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "providerSpecialty", _strong.SpecialtyKey, context);
                }
            }
            if (context.ShouldSerialize("dateOfBirthPrecision"))
            {
                if ((_strong.DateOfBirthPrecision == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "dateOfBirthPrecision", _strong.DateOfBirthPrecision, context);
                }
            }
            if (context.ShouldSerialize("genderConcept"))
            {
                if ((_strong.GenderConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "genderConcept", _strong.GenderConceptKey, context);
                }
            }
            if (context.ShouldSerialize("dateOfBirth"))
            {
                if ((_strong.DateOfBirthXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "dateOfBirth", _strong.DateOfBirthXml, context);
                }
            }
            if (context.ShouldSerialize("language"))
            {
                if (((_strong.LanguageCommunication == null)
                            || (_strong.LanguageCommunication.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "language", _strong.LanguageCommunication, context);
                }
            }
            if (context.ShouldSerialize("occupation"))
            {
                if ((_strong.OccupationKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "occupation", _strong.OccupationKey, context);
                }
            }
            if (context.ShouldSerialize("address"))
            {
                if (((_strong.Addresses == null)
                            || (_strong.Addresses.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("creationAct"))
            {
                if ((_strong.CreationActKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationAct", _strong.CreationActKey, context);
                }
            }
            if (context.ShouldSerialize("determinerConcept"))
            {
                if ((_strong.DeterminerConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "determinerConcept", _strong.DeterminerConceptKey, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("name"))
            {
                if (((_strong.Names == null)
                            || (_strong.Names.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("telecom"))
            {
                if (((_strong.Telecoms == null)
                            || (_strong.Telecoms.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                }
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Roles.Provider _retVal = new SanteDB.Core.Model.Roles.Provider();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("policy".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("typeConcept".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("template".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("telecom".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("telecom", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Telecoms = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("tag".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("statusConcept".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("participation".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("note".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("name".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.Names = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("identifier".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("extension".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("determinerConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.DeterminerConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("creationAct".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationAct", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.CreationActKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("classConcept".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("address".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("address", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.Addresses = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("occupation".Equals(r.Value))
                                                                                                                            {
                                                                                                                                r.Read();
                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("occupation", context.JsonContext, _retVal, context));
                                                                                                                                if ((_instance != null))
                                                                                                                                {
                                                                                                                                    _retVal.OccupationKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ("language".Equals(r.Value))
                                                                                                                                {
                                                                                                                                    r.Read();
                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.PersonLanguageCommunication>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("language", context.JsonContext, _retVal, context));
                                                                                                                                    if ((_instance != null))
                                                                                                                                    {
                                                                                                                                        _retVal.LanguageCommunication = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.PersonLanguageCommunication>)(_instance));
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    if ("dateOfBirth".Equals(r.Value))
                                                                                                                                    {
                                                                                                                                        r.Read();
                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("dateOfBirth", context.JsonContext, _retVal, context));
                                                                                                                                        if ((_instance != null))
                                                                                                                                        {
                                                                                                                                            _retVal.DateOfBirthXml = ((string)(_instance));
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        if ("genderConcept".Equals(r.Value))
                                                                                                                                        {
                                                                                                                                            r.Read();
                                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("genderConcept", context.JsonContext, _retVal, context));
                                                                                                                                            if ((_instance != null))
                                                                                                                                            {
                                                                                                                                                _retVal.GenderConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                        {
                                                                                                                                            if ("dateOfBirthPrecision".Equals(r.Value))
                                                                                                                                            {
                                                                                                                                                r.Read();
                                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<SanteDB.Core.Model.DataTypes.DatePrecision>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("dateOfBirthPrecision", context.JsonContext, _retVal, context));
                                                                                                                                                if ((_instance != null))
                                                                                                                                                {
                                                                                                                                                    _retVal.DateOfBirthPrecision = ((System.Nullable<SanteDB.Core.Model.DataTypes.DatePrecision>)(_instance));
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                                if ("providerSpecialty".Equals(r.Value))
                                                                                                                                                {
                                                                                                                                                    r.Read();
                                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("providerSpecialty", context.JsonContext, _retVal, context));
                                                                                                                                                    if ((_instance != null))
                                                                                                                                                    {
                                                                                                                                                        _retVal.SpecialtyKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else
                                                                                                                                                {
                                                                                                                                                    if ("$type".Equals(r.Value))
                                                                                                                                                    {
                                                                                                                                                        System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                        if ((_type != typeof(SanteDB.Core.Model.Roles.Provider)))
                                                                                                                                                        {
                                                                                                                                                            SanteDB.Core.Model.Roles.Provider _nretVal = ((SanteDB.Core.Model.Roles.Provider)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                            _nretVal.CopyObjectData(_retVal);
                                                                                                                                                            return _nretVal;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else
                                                                                                                                                    {
                                                                                                                                                        r.Skip();
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Patch.Patch"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class PatchViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(PatchViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Patch.Patch);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Patch.Patch _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Patch.Patch)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Patch.Patch)));
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.Version == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.Version, context);
                }
            }
            if (context.ShouldSerialize("appliesTo"))
            {
                if ((_strong.AppliesTo == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "appliesTo", _strong.AppliesTo, context);
                }
            }
            if (context.ShouldSerialize("change"))
            {
                if (((_strong.Operation == null)
                            || (_strong.Operation.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "change", _strong.Operation, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Patch.Patch _retVal = new SanteDB.Core.Model.Patch.Patch();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("change".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Patch.PatchOperation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("change", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.Operation = ((System.Collections.Generic.List<SanteDB.Core.Model.Patch.PatchOperation>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("appliesTo".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.Patch.PatchTarget), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("appliesTo", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.AppliesTo = ((SanteDB.Core.Model.Patch.PatchTarget)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("version".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.Version = ((string)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("$type".Equals(r.Value))
                                                        {
                                                            System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                            if ((_type != typeof(SanteDB.Core.Model.Patch.Patch)))
                                                            {
                                                                SanteDB.Core.Model.Patch.Patch _nretVal = ((SanteDB.Core.Model.Patch.Patch)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                _nretVal.CopyObjectData(_retVal);
                                                                return _nretVal;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            r.Skip();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Entities.ApplicationEntity"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ApplicationEntityViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(ApplicationEntityViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Entities.ApplicationEntity);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.ApplicationEntity _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Entities.ApplicationEntity)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Entities.ApplicationEntity)));
            }
            if (context.ShouldSerialize("securityApplication"))
            {
                if ((_strong.SecurityApplicationKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "securityApplication", _strong.SecurityApplicationKey, context);
                }
            }
            if (context.ShouldSerialize("softwareName"))
            {
                if ((_strong.SoftwareName == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "softwareName", _strong.SoftwareName, context);
                }
            }
            if (context.ShouldSerialize("vendorName"))
            {
                if ((_strong.VendorName == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "vendorName", _strong.VendorName, context);
                }
            }
            if (context.ShouldSerialize("versionName"))
            {
                if ((_strong.VersionName == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "versionName", _strong.VersionName, context);
                }
            }
            if (context.ShouldSerialize("address"))
            {
                if (((_strong.Addresses == null)
                            || (_strong.Addresses.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("creationAct"))
            {
                if ((_strong.CreationActKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationAct", _strong.CreationActKey, context);
                }
            }
            if (context.ShouldSerialize("determinerConcept"))
            {
                if ((_strong.DeterminerConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "determinerConcept", _strong.DeterminerConceptKey, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("name"))
            {
                if (((_strong.Names == null)
                            || (_strong.Names.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("telecom"))
            {
                if (((_strong.Telecoms == null)
                            || (_strong.Telecoms.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                }
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Entities.ApplicationEntity _retVal = new SanteDB.Core.Model.Entities.ApplicationEntity();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("policy".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("typeConcept".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("template".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("telecom".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("telecom", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Telecoms = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("tag".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("statusConcept".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("participation".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("note".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("name".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.Names = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("identifier".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("extension".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("determinerConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.DeterminerConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("creationAct".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationAct", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.CreationActKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("classConcept".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("address".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("address", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.Addresses = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("versionName".Equals(r.Value))
                                                                                                                            {
                                                                                                                                r.Read();
                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("versionName", context.JsonContext, _retVal, context));
                                                                                                                                if ((_instance != null))
                                                                                                                                {
                                                                                                                                    _retVal.VersionName = ((string)(_instance));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ("vendorName".Equals(r.Value))
                                                                                                                                {
                                                                                                                                    r.Read();
                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("vendorName", context.JsonContext, _retVal, context));
                                                                                                                                    if ((_instance != null))
                                                                                                                                    {
                                                                                                                                        _retVal.VendorName = ((string)(_instance));
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    if ("softwareName".Equals(r.Value))
                                                                                                                                    {
                                                                                                                                        r.Read();
                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("softwareName", context.JsonContext, _retVal, context));
                                                                                                                                        if ((_instance != null))
                                                                                                                                        {
                                                                                                                                            _retVal.SoftwareName = ((string)(_instance));
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        if ("securityApplication".Equals(r.Value))
                                                                                                                                        {
                                                                                                                                            r.Read();
                                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("securityApplication", context.JsonContext, _retVal, context));
                                                                                                                                            if ((_instance != null))
                                                                                                                                            {
                                                                                                                                                _retVal.SecurityApplicationKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                        {
                                                                                                                                            if ("$type".Equals(r.Value))
                                                                                                                                            {
                                                                                                                                                System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                if ((_type != typeof(SanteDB.Core.Model.Entities.ApplicationEntity)))
                                                                                                                                                {
                                                                                                                                                    SanteDB.Core.Model.Entities.ApplicationEntity _nretVal = ((SanteDB.Core.Model.Entities.ApplicationEntity)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                    _nretVal.CopyObjectData(_retVal);
                                                                                                                                                    return _nretVal;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                                r.Skip();
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Entities.Container"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ContainerViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(ContainerViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Entities.Container);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.Container _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Entities.Container)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Entities.Container)));
            }
            if (context.ShouldSerialize("lotNumber"))
            {
                if ((_strong.LotNumber == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "lotNumber", _strong.LotNumber, context);
                }
            }
            if (context.ShouldSerialize("capacityQuantity"))
            {
                if ((_strong.CapacityQuantity == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "capacityQuantity", _strong.CapacityQuantity, context);
                }
            }
            if (context.ShouldSerialize("diameterQuantity"))
            {
                if ((_strong.DiameterQuantity == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "diameterQuantity", _strong.DiameterQuantity, context);
                }
            }
            if (context.ShouldSerialize("heightQuantity"))
            {
                if ((_strong.HeightQuantity == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "heightQuantity", _strong.HeightQuantity, context);
                }
            }
            if (context.ShouldSerialize("expiryDate"))
            {
                if ((_strong.ExpiryDate == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "expiryDate", _strong.ExpiryDate, context);
                }
            }
            if (context.ShouldSerialize("formConcept"))
            {
                if ((_strong.FormConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "formConcept", _strong.FormConceptKey, context);
                }
            }
            if (context.ShouldSerialize("isAdministrative"))
            {
                context.JsonContext.WritePropertyUtil(w, "isAdministrative", _strong.IsAdministrative, context);
            }
            if (context.ShouldSerialize("quantity"))
            {
                if ((_strong.Quantity == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "quantity", _strong.Quantity, context);
                }
            }
            if (context.ShouldSerialize("quantityConcept"))
            {
                if ((_strong.QuantityConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "quantityConcept", _strong.QuantityConceptKey, context);
                }
            }
            if (context.ShouldSerialize("address"))
            {
                if (((_strong.Addresses == null)
                            || (_strong.Addresses.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("creationAct"))
            {
                if ((_strong.CreationActKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationAct", _strong.CreationActKey, context);
                }
            }
            if (context.ShouldSerialize("determinerConcept"))
            {
                if ((_strong.DeterminerConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "determinerConcept", _strong.DeterminerConceptKey, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("name"))
            {
                if (((_strong.Names == null)
                            || (_strong.Names.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("telecom"))
            {
                if (((_strong.Telecoms == null)
                            || (_strong.Telecoms.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                }
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Entities.Container _retVal = new SanteDB.Core.Model.Entities.Container();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("policy".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("typeConcept".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("template".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("telecom".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("telecom", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Telecoms = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("tag".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("statusConcept".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("participation".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("note".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("name".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.Names = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("identifier".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("extension".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("determinerConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.DeterminerConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("creationAct".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationAct", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.CreationActKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("classConcept".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("address".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("address", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.Addresses = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("quantityConcept".Equals(r.Value))
                                                                                                                            {
                                                                                                                                r.Read();
                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("quantityConcept", context.JsonContext, _retVal, context));
                                                                                                                                if ((_instance != null))
                                                                                                                                {
                                                                                                                                    _retVal.QuantityConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ("quantity".Equals(r.Value))
                                                                                                                                {
                                                                                                                                    r.Read();
                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("quantity", context.JsonContext, _retVal, context));
                                                                                                                                    if ((_instance != null))
                                                                                                                                    {
                                                                                                                                        _retVal.Quantity = ((System.Nullable<decimal>)(_instance));
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    if ("isAdministrative".Equals(r.Value))
                                                                                                                                    {
                                                                                                                                        r.Read();
                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(bool), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("isAdministrative", context.JsonContext, _retVal, context));
                                                                                                                                        if ((_instance != null))
                                                                                                                                        {
                                                                                                                                            _retVal.IsAdministrative = ((bool)(_instance));
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        if ("formConcept".Equals(r.Value))
                                                                                                                                        {
                                                                                                                                            r.Read();
                                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("formConcept", context.JsonContext, _retVal, context));
                                                                                                                                            if ((_instance != null))
                                                                                                                                            {
                                                                                                                                                _retVal.FormConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                        {
                                                                                                                                            if ("expiryDate".Equals(r.Value))
                                                                                                                                            {
                                                                                                                                                r.Read();
                                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTime>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("expiryDate", context.JsonContext, _retVal, context));
                                                                                                                                                if ((_instance != null))
                                                                                                                                                {
                                                                                                                                                    _retVal.ExpiryDate = ((System.Nullable<System.DateTime>)(_instance));
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                                if ("heightQuantity".Equals(r.Value))
                                                                                                                                                {
                                                                                                                                                    r.Read();
                                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("heightQuantity", context.JsonContext, _retVal, context));
                                                                                                                                                    if ((_instance != null))
                                                                                                                                                    {
                                                                                                                                                        _retVal.HeightQuantity = ((System.Nullable<decimal>)(_instance));
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else
                                                                                                                                                {
                                                                                                                                                    if ("diameterQuantity".Equals(r.Value))
                                                                                                                                                    {
                                                                                                                                                        r.Read();
                                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("diameterQuantity", context.JsonContext, _retVal, context));
                                                                                                                                                        if ((_instance != null))
                                                                                                                                                        {
                                                                                                                                                            _retVal.DiameterQuantity = ((System.Nullable<decimal>)(_instance));
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else
                                                                                                                                                    {
                                                                                                                                                        if ("capacityQuantity".Equals(r.Value))
                                                                                                                                                        {
                                                                                                                                                            r.Read();
                                                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("capacityQuantity", context.JsonContext, _retVal, context));
                                                                                                                                                            if ((_instance != null))
                                                                                                                                                            {
                                                                                                                                                                _retVal.CapacityQuantity = ((System.Nullable<decimal>)(_instance));
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        else
                                                                                                                                                        {
                                                                                                                                                            if ("lotNumber".Equals(r.Value))
                                                                                                                                                            {
                                                                                                                                                                r.Read();
                                                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("lotNumber", context.JsonContext, _retVal, context));
                                                                                                                                                                if ((_instance != null))
                                                                                                                                                                {
                                                                                                                                                                    _retVal.LotNumber = ((string)(_instance));
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            else
                                                                                                                                                            {
                                                                                                                                                                if ("$type".Equals(r.Value))
                                                                                                                                                                {
                                                                                                                                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                                    if ((_type != typeof(SanteDB.Core.Model.Entities.Container)))
                                                                                                                                                                    {
                                                                                                                                                                        SanteDB.Core.Model.Entities.Container _nretVal = ((SanteDB.Core.Model.Entities.Container)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                                        _nretVal.CopyObjectData(_retVal);
                                                                                                                                                                        return _nretVal;
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                else
                                                                                                                                                                {
                                                                                                                                                                    r.Skip();
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Entities.DeviceEntity"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class DeviceEntityViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(DeviceEntityViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Entities.DeviceEntity);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.DeviceEntity _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Entities.DeviceEntity)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Entities.DeviceEntity)));
            }
            if (context.ShouldSerialize("manufacturerModelName"))
            {
                if ((_strong.ManufacturerModelName == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "manufacturerModelName", _strong.ManufacturerModelName, context);
                }
            }
            if (context.ShouldSerialize("operatingSystemName"))
            {
                if ((_strong.OperatingSystemName == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "operatingSystemName", _strong.OperatingSystemName, context);
                }
            }
            if (context.ShouldSerialize("securityDevice"))
            {
                if ((_strong.SecurityDeviceKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "securityDevice", _strong.SecurityDeviceKey, context);
                }
            }
            if (context.ShouldSerialize("address"))
            {
                if (((_strong.Addresses == null)
                            || (_strong.Addresses.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("creationAct"))
            {
                if ((_strong.CreationActKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationAct", _strong.CreationActKey, context);
                }
            }
            if (context.ShouldSerialize("determinerConcept"))
            {
                if ((_strong.DeterminerConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "determinerConcept", _strong.DeterminerConceptKey, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("name"))
            {
                if (((_strong.Names == null)
                            || (_strong.Names.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("telecom"))
            {
                if (((_strong.Telecoms == null)
                            || (_strong.Telecoms.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                }
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Entities.DeviceEntity _retVal = new SanteDB.Core.Model.Entities.DeviceEntity();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("policy".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("typeConcept".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("template".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("telecom".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("telecom", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Telecoms = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("tag".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("statusConcept".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("participation".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("note".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("name".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.Names = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("identifier".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("extension".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("determinerConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.DeterminerConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("creationAct".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationAct", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.CreationActKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("classConcept".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("address".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("address", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.Addresses = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("securityDevice".Equals(r.Value))
                                                                                                                            {
                                                                                                                                r.Read();
                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("securityDevice", context.JsonContext, _retVal, context));
                                                                                                                                if ((_instance != null))
                                                                                                                                {
                                                                                                                                    _retVal.SecurityDeviceKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ("operatingSystemName".Equals(r.Value))
                                                                                                                                {
                                                                                                                                    r.Read();
                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operatingSystemName", context.JsonContext, _retVal, context));
                                                                                                                                    if ((_instance != null))
                                                                                                                                    {
                                                                                                                                        _retVal.OperatingSystemName = ((string)(_instance));
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    if ("manufacturerModelName".Equals(r.Value))
                                                                                                                                    {
                                                                                                                                        r.Read();
                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("manufacturerModelName", context.JsonContext, _retVal, context));
                                                                                                                                        if ((_instance != null))
                                                                                                                                        {
                                                                                                                                            _retVal.ManufacturerModelName = ((string)(_instance));
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        if ("$type".Equals(r.Value))
                                                                                                                                        {
                                                                                                                                            System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                            if ((_type != typeof(SanteDB.Core.Model.Entities.DeviceEntity)))
                                                                                                                                            {
                                                                                                                                                SanteDB.Core.Model.Entities.DeviceEntity _nretVal = ((SanteDB.Core.Model.Entities.DeviceEntity)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                _nretVal.CopyObjectData(_retVal);
                                                                                                                                                return _nretVal;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                        {
                                                                                                                                            r.Skip();
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Entities.Entity"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class EntityViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(EntityViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Entities.Entity);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.Entity _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Entities.Entity)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Entities.Entity)));
            }
            if (context.ShouldSerialize("address"))
            {
                if (((_strong.Addresses == null)
                            || (_strong.Addresses.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("creationAct"))
            {
                if ((_strong.CreationActKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationAct", _strong.CreationActKey, context);
                }
            }
            if (context.ShouldSerialize("determinerConcept"))
            {
                if ((_strong.DeterminerConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "determinerConcept", _strong.DeterminerConceptKey, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("name"))
            {
                if (((_strong.Names == null)
                            || (_strong.Names.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("telecom"))
            {
                if (((_strong.Telecoms == null)
                            || (_strong.Telecoms.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                }
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Entities.Entity _retVal = new SanteDB.Core.Model.Entities.Entity();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("policy".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("typeConcept".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("template".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("telecom".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("telecom", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Telecoms = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("tag".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("statusConcept".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("participation".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("note".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("name".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.Names = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("identifier".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("extension".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("determinerConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.DeterminerConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("creationAct".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationAct", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.CreationActKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("classConcept".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("address".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("address", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.Addresses = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("$type".Equals(r.Value))
                                                                                                                            {
                                                                                                                                System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                if ((_type != typeof(SanteDB.Core.Model.Entities.Entity)))
                                                                                                                                {
                                                                                                                                    SanteDB.Core.Model.Entities.Entity _nretVal = ((SanteDB.Core.Model.Entities.Entity)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                    _nretVal.CopyObjectData(_retVal);
                                                                                                                                    return _nretVal;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                r.Skip();
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Entities.EntityAddress"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class EntityAddressViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(EntityAddressViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Entities.EntityAddress);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.EntityAddress _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Entities.EntityAddress)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Entities.EntityAddress)));
            }
            if (context.ShouldSerialize("use"))
            {
                if ((_strong.AddressUseKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "use", _strong.AddressUseKey, context);
                }
            }
            if (context.ShouldSerialize("component"))
            {
                if (((_strong.Component == null)
                            || (_strong.Component.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "component", _strong.Component, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence"))
            {
                if ((_strong.EffectiveVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence"))
            {
                if ((_strong.ObsoleteVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn"))
            {
                context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
            }
            if (context.ShouldSerialize("source"))
            {
                if ((_strong.SourceEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Entities.EntityAddress _retVal = new SanteDB.Core.Model.Entities.EntityAddress();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("source".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.SourceEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("obsoleteVersionSequence".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.ObsoleteVersionSequenceId = ((System.Nullable<long>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("effectiveVersionSequence".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.EffectiveVersionSequenceId = ((System.Nullable<long>)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("component".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddressComponent>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("component", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.Component = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddressComponent>)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("use".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("use", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.AddressUseKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("$type".Equals(r.Value))
                                                {
                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                    if ((_type != typeof(SanteDB.Core.Model.Entities.EntityAddress)))
                                                    {
                                                        SanteDB.Core.Model.Entities.EntityAddress _nretVal = ((SanteDB.Core.Model.Entities.EntityAddress)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                        _nretVal.CopyObjectData(_retVal);
                                                        return _nretVal;
                                                    }
                                                }
                                                else
                                                {
                                                    r.Skip();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Entities.EntityAddressComponent"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class AddressComponentViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(AddressComponentViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Entities.EntityAddressComponent);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.EntityAddressComponent _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Entities.EntityAddressComponent)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Entities.EntityAddressComponent)));
            }
            if (context.ShouldSerialize("type"))
            {
                if ((_strong.ComponentTypeKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "type", _strong.ComponentTypeKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                context.JsonContext.WritePropertyUtil(w, "sequence", _strong.OrderSequence, context);
            }
            if (context.ShouldSerialize("value"))
            {
                if ((_strong.Value == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.Value, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn"))
            {
                context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
            }
            if (context.ShouldSerialize("source"))
            {
                if ((_strong.SourceEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Entities.EntityAddressComponent _retVal = new SanteDB.Core.Model.Entities.EntityAddressComponent();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("source".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.SourceEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("value".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.Value = ((string)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("sequence".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(long), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.OrderSequence = ((long)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("type".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("type", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.ComponentTypeKey = ((System.Nullable<System.Guid>)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("$type".Equals(r.Value))
                                            {
                                                System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                if ((_type != typeof(SanteDB.Core.Model.Entities.EntityAddressComponent)))
                                                {
                                                    SanteDB.Core.Model.Entities.EntityAddressComponent _nretVal = ((SanteDB.Core.Model.Entities.EntityAddressComponent)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                    _nretVal.CopyObjectData(_retVal);
                                                    return _nretVal;
                                                }
                                            }
                                            else
                                            {
                                                r.Skip();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Entities.EntityName"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class EntityNameViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(EntityNameViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Entities.EntityName);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.EntityName _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Entities.EntityName)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Entities.EntityName)));
            }
            if (context.ShouldSerialize("component"))
            {
                if (((_strong.Component == null)
                            || (_strong.Component.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "component", _strong.Component, context);
                }
            }
            if (context.ShouldSerialize("use"))
            {
                if ((_strong.NameUseKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "use", _strong.NameUseKey, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence"))
            {
                if ((_strong.EffectiveVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence"))
            {
                if ((_strong.ObsoleteVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn"))
            {
                context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
            }
            if (context.ShouldSerialize("source"))
            {
                if ((_strong.SourceEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Entities.EntityName _retVal = new SanteDB.Core.Model.Entities.EntityName();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("source".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.SourceEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("obsoleteVersionSequence".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.ObsoleteVersionSequenceId = ((System.Nullable<long>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("effectiveVersionSequence".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.EffectiveVersionSequenceId = ((System.Nullable<long>)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("use".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("use", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.NameUseKey = ((System.Nullable<System.Guid>)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("component".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityNameComponent>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("component", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.Component = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityNameComponent>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("$type".Equals(r.Value))
                                                {
                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                    if ((_type != typeof(SanteDB.Core.Model.Entities.EntityName)))
                                                    {
                                                        SanteDB.Core.Model.Entities.EntityName _nretVal = ((SanteDB.Core.Model.Entities.EntityName)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                        _nretVal.CopyObjectData(_retVal);
                                                        return _nretVal;
                                                    }
                                                }
                                                else
                                                {
                                                    r.Skip();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Entities.EntityNameComponent"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class EntityNameComponentViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(EntityNameComponentViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Entities.EntityNameComponent);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.EntityNameComponent _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Entities.EntityNameComponent)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Entities.EntityNameComponent)));
            }
            if (context.ShouldSerialize("type"))
            {
                if ((_strong.ComponentTypeKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "type", _strong.ComponentTypeKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                context.JsonContext.WritePropertyUtil(w, "sequence", _strong.OrderSequence, context);
            }
            if (context.ShouldSerialize("value"))
            {
                if ((_strong.Value == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.Value, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn"))
            {
                context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
            }
            if (context.ShouldSerialize("source"))
            {
                if ((_strong.SourceEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Entities.EntityNameComponent _retVal = new SanteDB.Core.Model.Entities.EntityNameComponent();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("source".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.SourceEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("value".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.Value = ((string)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("sequence".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(long), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.OrderSequence = ((long)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("type".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("type", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.ComponentTypeKey = ((System.Nullable<System.Guid>)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("$type".Equals(r.Value))
                                            {
                                                System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                if ((_type != typeof(SanteDB.Core.Model.Entities.EntityNameComponent)))
                                                {
                                                    SanteDB.Core.Model.Entities.EntityNameComponent _nretVal = ((SanteDB.Core.Model.Entities.EntityNameComponent)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                    _nretVal.CopyObjectData(_retVal);
                                                    return _nretVal;
                                                }
                                            }
                                            else
                                            {
                                                r.Skip();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Entities.EntityRelationship"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class EntityRelationshipViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(EntityRelationshipViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Entities.EntityRelationship);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.EntityRelationship _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Entities.EntityRelationship)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Entities.EntityRelationship)));
            }
            if (context.ShouldSerialize("holder"))
            {
                if ((_strong.HolderKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "holder", _strong.HolderKey, context);
                }
            }
            if (context.ShouldSerialize("inversionInd"))
            {
                context.JsonContext.WritePropertyUtil(w, "inversionInd", _strong.InversionIndicator, context);
            }
            if (context.ShouldSerialize("strength"))
            {
                if ((_strong.Strength == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "strength", _strong.Strength, context);
                }
            }
            if (context.ShouldSerialize("quantity"))
            {
                if ((_strong.Quantity == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "quantity", _strong.Quantity, context);
                }
            }
            if (context.ShouldSerialize("relationshipType"))
            {
                if ((_strong.RelationshipTypeKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationshipType", _strong.RelationshipTypeKey, context);
                }
            }
            if (context.ShouldSerialize("relationshipRole"))
            {
                if ((_strong.RelationshipRoleKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationshipRole", _strong.RelationshipRoleKey, context);
                }
            }
            if (context.ShouldSerialize("classification"))
            {
                if ((_strong.ClassificationKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classification", _strong.ClassificationKey, context);
                }
            }
            if (context.ShouldSerialize("target"))
            {
                if ((_strong.TargetEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "target", _strong.TargetEntityKey, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence"))
            {
                if ((_strong.EffectiveVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence"))
            {
                if ((_strong.ObsoleteVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn"))
            {
                context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
            }
            if (context.ShouldSerialize("source"))
            {
                if ((_strong.SourceEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Entities.EntityRelationship _retVal = new SanteDB.Core.Model.Entities.EntityRelationship();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("source".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.SourceEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("obsoleteVersionSequence".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.ObsoleteVersionSequenceId = ((System.Nullable<long>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("effectiveVersionSequence".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.EffectiveVersionSequenceId = ((System.Nullable<long>)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("target".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("target", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.TargetEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("classification".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classification", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.ClassificationKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("relationshipRole".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationshipRole", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.RelationshipRoleKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("relationshipType".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationshipType", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.RelationshipTypeKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("quantity".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<int>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("quantity", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.Quantity = ((System.Nullable<int>)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("strength".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<double>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("strength", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Strength = ((System.Nullable<double>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("inversionInd".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(bool), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("inversionInd", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.InversionIndicator = ((bool)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("holder".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("holder", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.HolderKey = ((System.Nullable<System.Guid>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("$type".Equals(r.Value))
                                                                        {
                                                                            System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                            if ((_type != typeof(SanteDB.Core.Model.Entities.EntityRelationship)))
                                                                            {
                                                                                SanteDB.Core.Model.Entities.EntityRelationship _nretVal = ((SanteDB.Core.Model.Entities.EntityRelationship)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                _nretVal.CopyObjectData(_retVal);
                                                                                return _nretVal;
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            r.Skip();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Entities.EntityTelecomAddress"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class EntityTelecomAddressViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(EntityTelecomAddressViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Entities.EntityTelecomAddress);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.EntityTelecomAddress _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Entities.EntityTelecomAddress)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Entities.EntityTelecomAddress)));
            }
            if (context.ShouldSerialize("use"))
            {
                if ((_strong.AddressUseKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "use", _strong.AddressUseKey, context);
                }
            }
            if (context.ShouldSerialize("type"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "type", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("value"))
            {
                if ((_strong.Value == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.Value, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence"))
            {
                if ((_strong.EffectiveVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence"))
            {
                if ((_strong.ObsoleteVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn"))
            {
                context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
            }
            if (context.ShouldSerialize("source"))
            {
                if ((_strong.SourceEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Entities.EntityTelecomAddress _retVal = new SanteDB.Core.Model.Entities.EntityTelecomAddress();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("source".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.SourceEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("obsoleteVersionSequence".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.ObsoleteVersionSequenceId = ((System.Nullable<long>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("effectiveVersionSequence".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.EffectiveVersionSequenceId = ((System.Nullable<long>)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("value".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.Value = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("type".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("type", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("use".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("use", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.AddressUseKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("$type".Equals(r.Value))
                                                    {
                                                        System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                        if ((_type != typeof(SanteDB.Core.Model.Entities.EntityTelecomAddress)))
                                                        {
                                                            SanteDB.Core.Model.Entities.EntityTelecomAddress _nretVal = ((SanteDB.Core.Model.Entities.EntityTelecomAddress)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                            _nretVal.CopyObjectData(_retVal);
                                                            return _nretVal;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        r.Skip();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Entities.ManufacturedMaterial"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ManufacturedMaterialViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(ManufacturedMaterialViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Entities.ManufacturedMaterial);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.ManufacturedMaterial _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Entities.ManufacturedMaterial)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Entities.ManufacturedMaterial)));
            }
            if (context.ShouldSerialize("lotNumber"))
            {
                if ((_strong.LotNumber == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "lotNumber", _strong.LotNumber, context);
                }
            }
            if (context.ShouldSerialize("expiryDate"))
            {
                if ((_strong.ExpiryDate == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "expiryDate", _strong.ExpiryDate, context);
                }
            }
            if (context.ShouldSerialize("formConcept"))
            {
                if ((_strong.FormConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "formConcept", _strong.FormConceptKey, context);
                }
            }
            if (context.ShouldSerialize("isAdministrative"))
            {
                context.JsonContext.WritePropertyUtil(w, "isAdministrative", _strong.IsAdministrative, context);
            }
            if (context.ShouldSerialize("quantity"))
            {
                if ((_strong.Quantity == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "quantity", _strong.Quantity, context);
                }
            }
            if (context.ShouldSerialize("quantityConcept"))
            {
                if ((_strong.QuantityConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "quantityConcept", _strong.QuantityConceptKey, context);
                }
            }
            if (context.ShouldSerialize("address"))
            {
                if (((_strong.Addresses == null)
                            || (_strong.Addresses.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("creationAct"))
            {
                if ((_strong.CreationActKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationAct", _strong.CreationActKey, context);
                }
            }
            if (context.ShouldSerialize("determinerConcept"))
            {
                if ((_strong.DeterminerConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "determinerConcept", _strong.DeterminerConceptKey, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("name"))
            {
                if (((_strong.Names == null)
                            || (_strong.Names.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("telecom"))
            {
                if (((_strong.Telecoms == null)
                            || (_strong.Telecoms.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                }
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Entities.ManufacturedMaterial _retVal = new SanteDB.Core.Model.Entities.ManufacturedMaterial();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("policy".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("typeConcept".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("template".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("telecom".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("telecom", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Telecoms = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("tag".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("statusConcept".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("participation".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("note".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("name".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.Names = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("identifier".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("extension".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("determinerConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.DeterminerConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("creationAct".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationAct", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.CreationActKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("classConcept".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("address".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("address", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.Addresses = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("quantityConcept".Equals(r.Value))
                                                                                                                            {
                                                                                                                                r.Read();
                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("quantityConcept", context.JsonContext, _retVal, context));
                                                                                                                                if ((_instance != null))
                                                                                                                                {
                                                                                                                                    _retVal.QuantityConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ("quantity".Equals(r.Value))
                                                                                                                                {
                                                                                                                                    r.Read();
                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("quantity", context.JsonContext, _retVal, context));
                                                                                                                                    if ((_instance != null))
                                                                                                                                    {
                                                                                                                                        _retVal.Quantity = ((System.Nullable<decimal>)(_instance));
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    if ("isAdministrative".Equals(r.Value))
                                                                                                                                    {
                                                                                                                                        r.Read();
                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(bool), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("isAdministrative", context.JsonContext, _retVal, context));
                                                                                                                                        if ((_instance != null))
                                                                                                                                        {
                                                                                                                                            _retVal.IsAdministrative = ((bool)(_instance));
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        if ("formConcept".Equals(r.Value))
                                                                                                                                        {
                                                                                                                                            r.Read();
                                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("formConcept", context.JsonContext, _retVal, context));
                                                                                                                                            if ((_instance != null))
                                                                                                                                            {
                                                                                                                                                _retVal.FormConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                        {
                                                                                                                                            if ("expiryDate".Equals(r.Value))
                                                                                                                                            {
                                                                                                                                                r.Read();
                                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTime>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("expiryDate", context.JsonContext, _retVal, context));
                                                                                                                                                if ((_instance != null))
                                                                                                                                                {
                                                                                                                                                    _retVal.ExpiryDate = ((System.Nullable<System.DateTime>)(_instance));
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                                if ("lotNumber".Equals(r.Value))
                                                                                                                                                {
                                                                                                                                                    r.Read();
                                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("lotNumber", context.JsonContext, _retVal, context));
                                                                                                                                                    if ((_instance != null))
                                                                                                                                                    {
                                                                                                                                                        _retVal.LotNumber = ((string)(_instance));
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else
                                                                                                                                                {
                                                                                                                                                    if ("$type".Equals(r.Value))
                                                                                                                                                    {
                                                                                                                                                        System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                        if ((_type != typeof(SanteDB.Core.Model.Entities.ManufacturedMaterial)))
                                                                                                                                                        {
                                                                                                                                                            SanteDB.Core.Model.Entities.ManufacturedMaterial _nretVal = ((SanteDB.Core.Model.Entities.ManufacturedMaterial)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                            _nretVal.CopyObjectData(_retVal);
                                                                                                                                                            return _nretVal;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else
                                                                                                                                                    {
                                                                                                                                                        r.Skip();
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Entities.Material"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class MaterialViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(MaterialViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Entities.Material);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.Material _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Entities.Material)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Entities.Material)));
            }
            if (context.ShouldSerialize("expiryDate"))
            {
                if ((_strong.ExpiryDate == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "expiryDate", _strong.ExpiryDate, context);
                }
            }
            if (context.ShouldSerialize("formConcept"))
            {
                if ((_strong.FormConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "formConcept", _strong.FormConceptKey, context);
                }
            }
            if (context.ShouldSerialize("isAdministrative"))
            {
                context.JsonContext.WritePropertyUtil(w, "isAdministrative", _strong.IsAdministrative, context);
            }
            if (context.ShouldSerialize("quantity"))
            {
                if ((_strong.Quantity == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "quantity", _strong.Quantity, context);
                }
            }
            if (context.ShouldSerialize("quantityConcept"))
            {
                if ((_strong.QuantityConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "quantityConcept", _strong.QuantityConceptKey, context);
                }
            }
            if (context.ShouldSerialize("address"))
            {
                if (((_strong.Addresses == null)
                            || (_strong.Addresses.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("creationAct"))
            {
                if ((_strong.CreationActKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationAct", _strong.CreationActKey, context);
                }
            }
            if (context.ShouldSerialize("determinerConcept"))
            {
                if ((_strong.DeterminerConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "determinerConcept", _strong.DeterminerConceptKey, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("name"))
            {
                if (((_strong.Names == null)
                            || (_strong.Names.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("telecom"))
            {
                if (((_strong.Telecoms == null)
                            || (_strong.Telecoms.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                }
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Entities.Material _retVal = new SanteDB.Core.Model.Entities.Material();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("policy".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("typeConcept".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("template".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("telecom".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("telecom", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Telecoms = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("tag".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("statusConcept".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("participation".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("note".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("name".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.Names = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("identifier".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("extension".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("determinerConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.DeterminerConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("creationAct".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationAct", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.CreationActKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("classConcept".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("address".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("address", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.Addresses = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("quantityConcept".Equals(r.Value))
                                                                                                                            {
                                                                                                                                r.Read();
                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("quantityConcept", context.JsonContext, _retVal, context));
                                                                                                                                if ((_instance != null))
                                                                                                                                {
                                                                                                                                    _retVal.QuantityConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ("quantity".Equals(r.Value))
                                                                                                                                {
                                                                                                                                    r.Read();
                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("quantity", context.JsonContext, _retVal, context));
                                                                                                                                    if ((_instance != null))
                                                                                                                                    {
                                                                                                                                        _retVal.Quantity = ((System.Nullable<decimal>)(_instance));
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    if ("isAdministrative".Equals(r.Value))
                                                                                                                                    {
                                                                                                                                        r.Read();
                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(bool), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("isAdministrative", context.JsonContext, _retVal, context));
                                                                                                                                        if ((_instance != null))
                                                                                                                                        {
                                                                                                                                            _retVal.IsAdministrative = ((bool)(_instance));
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        if ("formConcept".Equals(r.Value))
                                                                                                                                        {
                                                                                                                                            r.Read();
                                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("formConcept", context.JsonContext, _retVal, context));
                                                                                                                                            if ((_instance != null))
                                                                                                                                            {
                                                                                                                                                _retVal.FormConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                        {
                                                                                                                                            if ("expiryDate".Equals(r.Value))
                                                                                                                                            {
                                                                                                                                                r.Read();
                                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTime>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("expiryDate", context.JsonContext, _retVal, context));
                                                                                                                                                if ((_instance != null))
                                                                                                                                                {
                                                                                                                                                    _retVal.ExpiryDate = ((System.Nullable<System.DateTime>)(_instance));
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                                if ("$type".Equals(r.Value))
                                                                                                                                                {
                                                                                                                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                    if ((_type != typeof(SanteDB.Core.Model.Entities.Material)))
                                                                                                                                                    {
                                                                                                                                                        SanteDB.Core.Model.Entities.Material _nretVal = ((SanteDB.Core.Model.Entities.Material)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                        _nretVal.CopyObjectData(_retVal);
                                                                                                                                                        return _nretVal;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else
                                                                                                                                                {
                                                                                                                                                    r.Skip();
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Entities.NonPersonLivingSubject"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class NonPersonLivingSubjectViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(NonPersonLivingSubjectViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Entities.NonPersonLivingSubject);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.NonPersonLivingSubject _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Entities.NonPersonLivingSubject)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Entities.NonPersonLivingSubject)));
            }
            if (context.ShouldSerialize("strain"))
            {
                if ((_strong.StrainKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "strain", _strong.StrainKey, context);
                }
            }
            if (context.ShouldSerialize("address"))
            {
                if (((_strong.Addresses == null)
                            || (_strong.Addresses.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("creationAct"))
            {
                if ((_strong.CreationActKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationAct", _strong.CreationActKey, context);
                }
            }
            if (context.ShouldSerialize("determinerConcept"))
            {
                if ((_strong.DeterminerConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "determinerConcept", _strong.DeterminerConceptKey, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("name"))
            {
                if (((_strong.Names == null)
                            || (_strong.Names.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("telecom"))
            {
                if (((_strong.Telecoms == null)
                            || (_strong.Telecoms.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                }
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Entities.NonPersonLivingSubject _retVal = new SanteDB.Core.Model.Entities.NonPersonLivingSubject();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("policy".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("typeConcept".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("template".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("telecom".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("telecom", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Telecoms = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("tag".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("statusConcept".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("participation".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("note".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("name".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.Names = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("identifier".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("extension".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("determinerConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.DeterminerConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("creationAct".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationAct", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.CreationActKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("classConcept".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("address".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("address", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.Addresses = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("strain".Equals(r.Value))
                                                                                                                            {
                                                                                                                                r.Read();
                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("strain", context.JsonContext, _retVal, context));
                                                                                                                                if ((_instance != null))
                                                                                                                                {
                                                                                                                                    _retVal.StrainKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ("$type".Equals(r.Value))
                                                                                                                                {
                                                                                                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                    if ((_type != typeof(SanteDB.Core.Model.Entities.NonPersonLivingSubject)))
                                                                                                                                    {
                                                                                                                                        SanteDB.Core.Model.Entities.NonPersonLivingSubject _nretVal = ((SanteDB.Core.Model.Entities.NonPersonLivingSubject)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                        _nretVal.CopyObjectData(_retVal);
                                                                                                                                        return _nretVal;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    r.Skip();
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Entities.Organization"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class OrganizationViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(OrganizationViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Entities.Organization);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.Organization _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Entities.Organization)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Entities.Organization)));
            }
            if (context.ShouldSerialize("industryConcept"))
            {
                if ((_strong.IndustryConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "industryConcept", _strong.IndustryConceptKey, context);
                }
            }
            if (context.ShouldSerialize("address"))
            {
                if (((_strong.Addresses == null)
                            || (_strong.Addresses.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("creationAct"))
            {
                if ((_strong.CreationActKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationAct", _strong.CreationActKey, context);
                }
            }
            if (context.ShouldSerialize("determinerConcept"))
            {
                if ((_strong.DeterminerConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "determinerConcept", _strong.DeterminerConceptKey, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("name"))
            {
                if (((_strong.Names == null)
                            || (_strong.Names.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("telecom"))
            {
                if (((_strong.Telecoms == null)
                            || (_strong.Telecoms.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                }
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Entities.Organization _retVal = new SanteDB.Core.Model.Entities.Organization();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("policy".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("typeConcept".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("template".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("telecom".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("telecom", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Telecoms = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("tag".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("statusConcept".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("participation".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("note".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("name".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.Names = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("identifier".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("extension".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("determinerConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.DeterminerConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("creationAct".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationAct", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.CreationActKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("classConcept".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("address".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("address", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.Addresses = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("industryConcept".Equals(r.Value))
                                                                                                                            {
                                                                                                                                r.Read();
                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("industryConcept", context.JsonContext, _retVal, context));
                                                                                                                                if ((_instance != null))
                                                                                                                                {
                                                                                                                                    _retVal.IndustryConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ("$type".Equals(r.Value))
                                                                                                                                {
                                                                                                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                    if ((_type != typeof(SanteDB.Core.Model.Entities.Organization)))
                                                                                                                                    {
                                                                                                                                        SanteDB.Core.Model.Entities.Organization _nretVal = ((SanteDB.Core.Model.Entities.Organization)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                        _nretVal.CopyObjectData(_retVal);
                                                                                                                                        return _nretVal;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    r.Skip();
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Entities.Person"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class PersonViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(PersonViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Entities.Person);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.Person _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Entities.Person)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Entities.Person)));
            }
            if (context.ShouldSerialize("dateOfBirthPrecision"))
            {
                if ((_strong.DateOfBirthPrecision == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "dateOfBirthPrecision", _strong.DateOfBirthPrecision, context);
                }
            }
            if (context.ShouldSerialize("genderConcept"))
            {
                if ((_strong.GenderConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "genderConcept", _strong.GenderConceptKey, context);
                }
            }
            if (context.ShouldSerialize("dateOfBirth"))
            {
                if ((_strong.DateOfBirthXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "dateOfBirth", _strong.DateOfBirthXml, context);
                }
            }
            if (context.ShouldSerialize("language"))
            {
                if (((_strong.LanguageCommunication == null)
                            || (_strong.LanguageCommunication.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "language", _strong.LanguageCommunication, context);
                }
            }
            if (context.ShouldSerialize("occupation"))
            {
                if ((_strong.OccupationKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "occupation", _strong.OccupationKey, context);
                }
            }
            if (context.ShouldSerialize("address"))
            {
                if (((_strong.Addresses == null)
                            || (_strong.Addresses.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("creationAct"))
            {
                if ((_strong.CreationActKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationAct", _strong.CreationActKey, context);
                }
            }
            if (context.ShouldSerialize("determinerConcept"))
            {
                if ((_strong.DeterminerConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "determinerConcept", _strong.DeterminerConceptKey, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("name"))
            {
                if (((_strong.Names == null)
                            || (_strong.Names.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("telecom"))
            {
                if (((_strong.Telecoms == null)
                            || (_strong.Telecoms.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                }
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Entities.Person _retVal = new SanteDB.Core.Model.Entities.Person();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("policy".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("typeConcept".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("template".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("telecom".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("telecom", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Telecoms = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("tag".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("statusConcept".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("participation".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("note".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("name".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.Names = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("identifier".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("extension".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("determinerConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.DeterminerConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("creationAct".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationAct", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.CreationActKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("classConcept".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("address".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("address", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.Addresses = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("occupation".Equals(r.Value))
                                                                                                                            {
                                                                                                                                r.Read();
                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("occupation", context.JsonContext, _retVal, context));
                                                                                                                                if ((_instance != null))
                                                                                                                                {
                                                                                                                                    _retVal.OccupationKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ("language".Equals(r.Value))
                                                                                                                                {
                                                                                                                                    r.Read();
                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.PersonLanguageCommunication>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("language", context.JsonContext, _retVal, context));
                                                                                                                                    if ((_instance != null))
                                                                                                                                    {
                                                                                                                                        _retVal.LanguageCommunication = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.PersonLanguageCommunication>)(_instance));
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    if ("dateOfBirth".Equals(r.Value))
                                                                                                                                    {
                                                                                                                                        r.Read();
                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("dateOfBirth", context.JsonContext, _retVal, context));
                                                                                                                                        if ((_instance != null))
                                                                                                                                        {
                                                                                                                                            _retVal.DateOfBirthXml = ((string)(_instance));
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        if ("genderConcept".Equals(r.Value))
                                                                                                                                        {
                                                                                                                                            r.Read();
                                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("genderConcept", context.JsonContext, _retVal, context));
                                                                                                                                            if ((_instance != null))
                                                                                                                                            {
                                                                                                                                                _retVal.GenderConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                        {
                                                                                                                                            if ("dateOfBirthPrecision".Equals(r.Value))
                                                                                                                                            {
                                                                                                                                                r.Read();
                                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<SanteDB.Core.Model.DataTypes.DatePrecision>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("dateOfBirthPrecision", context.JsonContext, _retVal, context));
                                                                                                                                                if ((_instance != null))
                                                                                                                                                {
                                                                                                                                                    _retVal.DateOfBirthPrecision = ((System.Nullable<SanteDB.Core.Model.DataTypes.DatePrecision>)(_instance));
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                                if ("$type".Equals(r.Value))
                                                                                                                                                {
                                                                                                                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                    if ((_type != typeof(SanteDB.Core.Model.Entities.Person)))
                                                                                                                                                    {
                                                                                                                                                        SanteDB.Core.Model.Entities.Person _nretVal = ((SanteDB.Core.Model.Entities.Person)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                        _nretVal.CopyObjectData(_retVal);
                                                                                                                                                        return _nretVal;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else
                                                                                                                                                {
                                                                                                                                                    r.Skip();
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Entities.PersonLanguageCommunication"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class PersonLanguageCommunicationViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(PersonLanguageCommunicationViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Entities.PersonLanguageCommunication);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.PersonLanguageCommunication _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Entities.PersonLanguageCommunication)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Entities.PersonLanguageCommunication)));
            }
            if (context.ShouldSerialize("isPreferred"))
            {
                context.JsonContext.WritePropertyUtil(w, "isPreferred", _strong.IsPreferred, context);
            }
            if (context.ShouldSerialize("languageCode"))
            {
                if ((_strong.LanguageCode == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "languageCode", _strong.LanguageCode, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence"))
            {
                if ((_strong.EffectiveVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence"))
            {
                if ((_strong.ObsoleteVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn"))
            {
                context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
            }
            if (context.ShouldSerialize("source"))
            {
                if ((_strong.SourceEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Entities.PersonLanguageCommunication _retVal = new SanteDB.Core.Model.Entities.PersonLanguageCommunication();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("source".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.SourceEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("obsoleteVersionSequence".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.ObsoleteVersionSequenceId = ((System.Nullable<long>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("effectiveVersionSequence".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.EffectiveVersionSequenceId = ((System.Nullable<long>)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("languageCode".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("languageCode", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.LanguageCode = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("isPreferred".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(bool), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("isPreferred", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.IsPreferred = ((bool)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("$type".Equals(r.Value))
                                                {
                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                    if ((_type != typeof(SanteDB.Core.Model.Entities.PersonLanguageCommunication)))
                                                    {
                                                        SanteDB.Core.Model.Entities.PersonLanguageCommunication _nretVal = ((SanteDB.Core.Model.Entities.PersonLanguageCommunication)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                        _nretVal.CopyObjectData(_retVal);
                                                        return _nretVal;
                                                    }
                                                }
                                                else
                                                {
                                                    r.Skip();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Entities.Place"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class PlaceViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(PlaceViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Entities.Place);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.Place _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Entities.Place)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Entities.Place)));
            }
            if (context.ShouldSerialize("isMobile"))
            {
                context.JsonContext.WritePropertyUtil(w, "isMobile", _strong.IsMobile, context);
            }
            if (context.ShouldSerialize("service"))
            {
                if (((_strong.Services == null)
                            || (_strong.Services.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "service", _strong.Services, context);
                }
            }
            if (context.ShouldSerialize("address"))
            {
                if (((_strong.Addresses == null)
                            || (_strong.Addresses.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("creationAct"))
            {
                if ((_strong.CreationActKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationAct", _strong.CreationActKey, context);
                }
            }
            if (context.ShouldSerialize("determinerConcept"))
            {
                if ((_strong.DeterminerConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "determinerConcept", _strong.DeterminerConceptKey, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("name"))
            {
                if (((_strong.Names == null)
                            || (_strong.Names.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("telecom"))
            {
                if (((_strong.Telecoms == null)
                            || (_strong.Telecoms.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                }
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Entities.Place _retVal = new SanteDB.Core.Model.Entities.Place();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("policy".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("typeConcept".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("template".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("telecom".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("telecom", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Telecoms = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("tag".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("statusConcept".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("participation".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("note".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("name".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.Names = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("identifier".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("extension".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("determinerConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.DeterminerConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("creationAct".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationAct", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.CreationActKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("classConcept".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("address".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("address", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.Addresses = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("service".Equals(r.Value))
                                                                                                                            {
                                                                                                                                r.Read();
                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.PlaceService>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("service", context.JsonContext, _retVal, context));
                                                                                                                                if ((_instance != null))
                                                                                                                                {
                                                                                                                                    _retVal.Services = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.PlaceService>)(_instance));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ("isMobile".Equals(r.Value))
                                                                                                                                {
                                                                                                                                    r.Read();
                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(bool), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("isMobile", context.JsonContext, _retVal, context));
                                                                                                                                    if ((_instance != null))
                                                                                                                                    {
                                                                                                                                        _retVal.IsMobile = ((bool)(_instance));
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    if ("$type".Equals(r.Value))
                                                                                                                                    {
                                                                                                                                        System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                        if ((_type != typeof(SanteDB.Core.Model.Entities.Place)))
                                                                                                                                        {
                                                                                                                                            SanteDB.Core.Model.Entities.Place _nretVal = ((SanteDB.Core.Model.Entities.Place)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                            _nretVal.CopyObjectData(_retVal);
                                                                                                                                            return _nretVal;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        r.Skip();
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Entities.PlaceService"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class PlaceServiceViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(PlaceServiceViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Entities.PlaceService);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.PlaceService _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Entities.PlaceService)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Entities.PlaceService)));
            }
            if (context.ShouldSerialize("serviceConcept"))
            {
                if ((_strong.ServiceConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "serviceConcept", _strong.ServiceConceptKey, context);
                }
            }
            if (context.ShouldSerialize("serviceSchedule"))
            {
                if ((_strong.ServiceSchedule == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "serviceSchedule", _strong.ServiceSchedule, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence"))
            {
                if ((_strong.EffectiveVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence"))
            {
                if ((_strong.ObsoleteVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn"))
            {
                context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
            }
            if (context.ShouldSerialize("source"))
            {
                if ((_strong.SourceEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Entities.PlaceService _retVal = new SanteDB.Core.Model.Entities.PlaceService();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("source".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.SourceEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("obsoleteVersionSequence".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.ObsoleteVersionSequenceId = ((System.Nullable<long>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("effectiveVersionSequence".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.EffectiveVersionSequenceId = ((System.Nullable<long>)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("serviceSchedule".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("serviceSchedule", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.ServiceSchedule = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("serviceConcept".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("serviceConcept", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.ServiceConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("$type".Equals(r.Value))
                                                {
                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                    if ((_type != typeof(SanteDB.Core.Model.Entities.PlaceService)))
                                                    {
                                                        SanteDB.Core.Model.Entities.PlaceService _nretVal = ((SanteDB.Core.Model.Entities.PlaceService)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                        _nretVal.CopyObjectData(_retVal);
                                                        return _nretVal;
                                                    }
                                                }
                                                else
                                                {
                                                    r.Skip();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Entities.UserEntity"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class UserEntityViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(UserEntityViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Entities.UserEntity);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.UserEntity _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Entities.UserEntity)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Entities.UserEntity)));
            }
            if (context.ShouldSerialize("securityUser"))
            {
                if ((_strong.SecurityUserKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "securityUser", _strong.SecurityUserKey, context);
                }
            }
            if (context.ShouldSerialize("dateOfBirthPrecision"))
            {
                if ((_strong.DateOfBirthPrecision == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "dateOfBirthPrecision", _strong.DateOfBirthPrecision, context);
                }
            }
            if (context.ShouldSerialize("genderConcept"))
            {
                if ((_strong.GenderConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "genderConcept", _strong.GenderConceptKey, context);
                }
            }
            if (context.ShouldSerialize("dateOfBirth"))
            {
                if ((_strong.DateOfBirthXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "dateOfBirth", _strong.DateOfBirthXml, context);
                }
            }
            if (context.ShouldSerialize("language"))
            {
                if (((_strong.LanguageCommunication == null)
                            || (_strong.LanguageCommunication.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "language", _strong.LanguageCommunication, context);
                }
            }
            if (context.ShouldSerialize("occupation"))
            {
                if ((_strong.OccupationKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "occupation", _strong.OccupationKey, context);
                }
            }
            if (context.ShouldSerialize("address"))
            {
                if (((_strong.Addresses == null)
                            || (_strong.Addresses.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("creationAct"))
            {
                if ((_strong.CreationActKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationAct", _strong.CreationActKey, context);
                }
            }
            if (context.ShouldSerialize("determinerConcept"))
            {
                if ((_strong.DeterminerConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "determinerConcept", _strong.DeterminerConceptKey, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("name"))
            {
                if (((_strong.Names == null)
                            || (_strong.Names.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("telecom"))
            {
                if (((_strong.Telecoms == null)
                            || (_strong.Telecoms.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                }
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Entities.UserEntity _retVal = new SanteDB.Core.Model.Entities.UserEntity();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("policy".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("typeConcept".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("template".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("telecom".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("telecom", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Telecoms = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("tag".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("statusConcept".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("participation".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("note".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("name".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.Names = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("identifier".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("extension".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("determinerConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.DeterminerConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("creationAct".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationAct", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.CreationActKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("classConcept".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("address".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("address", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.Addresses = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("occupation".Equals(r.Value))
                                                                                                                            {
                                                                                                                                r.Read();
                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("occupation", context.JsonContext, _retVal, context));
                                                                                                                                if ((_instance != null))
                                                                                                                                {
                                                                                                                                    _retVal.OccupationKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ("language".Equals(r.Value))
                                                                                                                                {
                                                                                                                                    r.Read();
                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Entities.PersonLanguageCommunication>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("language", context.JsonContext, _retVal, context));
                                                                                                                                    if ((_instance != null))
                                                                                                                                    {
                                                                                                                                        _retVal.LanguageCommunication = ((System.Collections.Generic.List<SanteDB.Core.Model.Entities.PersonLanguageCommunication>)(_instance));
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    if ("dateOfBirth".Equals(r.Value))
                                                                                                                                    {
                                                                                                                                        r.Read();
                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("dateOfBirth", context.JsonContext, _retVal, context));
                                                                                                                                        if ((_instance != null))
                                                                                                                                        {
                                                                                                                                            _retVal.DateOfBirthXml = ((string)(_instance));
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        if ("genderConcept".Equals(r.Value))
                                                                                                                                        {
                                                                                                                                            r.Read();
                                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("genderConcept", context.JsonContext, _retVal, context));
                                                                                                                                            if ((_instance != null))
                                                                                                                                            {
                                                                                                                                                _retVal.GenderConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                        {
                                                                                                                                            if ("dateOfBirthPrecision".Equals(r.Value))
                                                                                                                                            {
                                                                                                                                                r.Read();
                                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<SanteDB.Core.Model.DataTypes.DatePrecision>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("dateOfBirthPrecision", context.JsonContext, _retVal, context));
                                                                                                                                                if ((_instance != null))
                                                                                                                                                {
                                                                                                                                                    _retVal.DateOfBirthPrecision = ((System.Nullable<SanteDB.Core.Model.DataTypes.DatePrecision>)(_instance));
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                                if ("securityUser".Equals(r.Value))
                                                                                                                                                {
                                                                                                                                                    r.Read();
                                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("securityUser", context.JsonContext, _retVal, context));
                                                                                                                                                    if ((_instance != null))
                                                                                                                                                    {
                                                                                                                                                        _retVal.SecurityUserKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else
                                                                                                                                                {
                                                                                                                                                    if ("$type".Equals(r.Value))
                                                                                                                                                    {
                                                                                                                                                        System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                        if ((_type != typeof(SanteDB.Core.Model.Entities.UserEntity)))
                                                                                                                                                        {
                                                                                                                                                            SanteDB.Core.Model.Entities.UserEntity _nretVal = ((SanteDB.Core.Model.Entities.UserEntity)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                            _nretVal.CopyObjectData(_retVal);
                                                                                                                                                            return _nretVal;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else
                                                                                                                                                    {
                                                                                                                                                        r.Skip();
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.DataTypes.AssigningAuthority"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class AssigningAuthorityViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(AssigningAuthorityViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.DataTypes.AssigningAuthority);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.AssigningAuthority _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.DataTypes.AssigningAuthority)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.DataTypes.AssigningAuthority)));
            }
            if (context.ShouldSerialize("assigningApplication"))
            {
                if ((_strong.AssigningApplicationKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "assigningApplication", _strong.AssigningApplicationKey, context);
                }
            }
            if (context.ShouldSerialize("reliability"))
            {
                context.JsonContext.WritePropertyUtil(w, "reliability", _strong.Reliability, context);
            }
            if (context.ShouldSerialize("source"))
            {
                if ((_strong.SourceEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.DataTypes.AssigningAuthority _retVal = new SanteDB.Core.Model.DataTypes.AssigningAuthority();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("source".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.SourceEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("reliability".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.IdentifierReliability), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("reliability", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.Reliability = ((SanteDB.Core.Model.DataTypes.IdentifierReliability)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("assigningApplication".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("assigningApplication", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.AssigningApplicationKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("$type".Equals(r.Value))
                                                        {
                                                            System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                            if ((_type != typeof(SanteDB.Core.Model.DataTypes.AssigningAuthority)))
                                                            {
                                                                SanteDB.Core.Model.DataTypes.AssigningAuthority _nretVal = ((SanteDB.Core.Model.DataTypes.AssigningAuthority)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                _nretVal.CopyObjectData(_retVal);
                                                                return _nretVal;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            r.Skip();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.DataTypes.CodeSystem"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class CodeSystemViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(CodeSystemViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.DataTypes.CodeSystem);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.CodeSystem _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.DataTypes.CodeSystem)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.DataTypes.CodeSystem)));
            }
            if (context.ShouldSerialize("name"))
            {
                if ((_strong.Name == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("oid"))
            {
                if ((_strong.Oid == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "oid", _strong.Oid, context);
                }
            }
            if (context.ShouldSerialize("authority"))
            {
                if ((_strong.Authority == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "authority", _strong.Authority, context);
                }
            }
            if (context.ShouldSerialize("obsoletionReason"))
            {
                if ((_strong.ObsoletionReason == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionReason", _strong.ObsoletionReason, context);
                }
            }
            if (context.ShouldSerialize("url"))
            {
                if ((_strong.Url == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "url", _strong.Url, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionText == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionText, context);
                }
            }
            if (context.ShouldSerialize("description"))
            {
                if ((_strong.Description == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "description", _strong.Description, context);
                }
            }
            if (context.ShouldSerialize("updatedTime"))
            {
                if ((_strong.UpdatedTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy"))
            {
                if ((_strong.UpdatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.DataTypes.CodeSystem _retVal = new SanteDB.Core.Model.DataTypes.CodeSystem();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("updatedBy".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.UpdatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("updatedTime".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.UpdatedTimeXml = ((string)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("description".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("description", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.Description = ((string)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("version".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.VersionText = ((string)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("url".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("url", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Url = ((string)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("obsoletionReason".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionReason", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.ObsoletionReason = ((string)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("authority".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("authority", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.Authority = ((string)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("oid".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("oid", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Oid = ((string)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("name".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Name = ((string)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("$type".Equals(r.Value))
                                                                                {
                                                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                    if ((_type != typeof(SanteDB.Core.Model.DataTypes.CodeSystem)))
                                                                                    {
                                                                                        SanteDB.Core.Model.DataTypes.CodeSystem _nretVal = ((SanteDB.Core.Model.DataTypes.CodeSystem)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                        _nretVal.CopyObjectData(_retVal);
                                                                                        return _nretVal;
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    r.Skip();
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.DataTypes.Concept"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ConceptViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(ConceptViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.DataTypes.Concept);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.Concept _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.DataTypes.Concept)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.DataTypes.Concept)));
            }
            if (context.ShouldSerialize("mnemonic"))
            {
                if ((_strong.Mnemonic == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "mnemonic", _strong.Mnemonic, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("conceptClass"))
            {
                if ((_strong.ClassKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "conceptClass", _strong.ClassKey, context);
                }
            }
            if (context.ShouldSerialize("referenceTerm"))
            {
                if (((_strong.ReferenceTerms == null)
                            || (_strong.ReferenceTerms.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "referenceTerm", _strong.ReferenceTerms, context);
                }
            }
            if (context.ShouldSerialize("name"))
            {
                if (((_strong.ConceptNames == null)
                            || (_strong.ConceptNames.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.ConceptNames, context);
                }
            }
            if (context.ShouldSerialize("conceptSet"))
            {
                if (((_strong.ConceptSetsXml == null)
                            || (_strong.ConceptSetsXml.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "conceptSet", _strong.ConceptSetsXml, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.DataTypes.Concept _retVal = new SanteDB.Core.Model.DataTypes.Concept();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("conceptSet".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("conceptSet", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.ConceptSetsXml = ((System.Collections.Generic.List<System.Guid>)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("name".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ConceptName>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.ConceptNames = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ConceptName>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("referenceTerm".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ConceptReferenceTerm>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("referenceTerm", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.ReferenceTerms = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ConceptReferenceTerm>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("conceptClass".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("conceptClass", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.ClassKey = ((System.Nullable<System.Guid>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("relationship".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ConceptRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ConceptRelationship>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("statusConcept".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("mnemonic".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("mnemonic", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.Mnemonic = ((string)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("$type".Equals(r.Value))
                                                                                    {
                                                                                        System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                        if ((_type != typeof(SanteDB.Core.Model.DataTypes.Concept)))
                                                                                        {
                                                                                            SanteDB.Core.Model.DataTypes.Concept _nretVal = ((SanteDB.Core.Model.DataTypes.Concept)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                            _nretVal.CopyObjectData(_retVal);
                                                                                            return _nretVal;
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        r.Skip();
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.DataTypes.ConceptClass"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ConceptClassViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(ConceptClassViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.DataTypes.ConceptClass);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ConceptClass _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.DataTypes.ConceptClass)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.DataTypes.ConceptClass)));
            }
            if (context.ShouldSerialize("name"))
            {
                if ((_strong.Name == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("mnemonic"))
            {
                if ((_strong.Mnemonic == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "mnemonic", _strong.Mnemonic, context);
                }
            }
            if (context.ShouldSerialize("updatedTime"))
            {
                if ((_strong.UpdatedTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy"))
            {
                if ((_strong.UpdatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.DataTypes.ConceptClass _retVal = new SanteDB.Core.Model.DataTypes.ConceptClass();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("updatedBy".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.UpdatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("updatedTime".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.UpdatedTimeXml = ((string)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("mnemonic".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("mnemonic", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.Mnemonic = ((string)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("name".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.Name = ((string)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("$type".Equals(r.Value))
                                                            {
                                                                System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                if ((_type != typeof(SanteDB.Core.Model.DataTypes.ConceptClass)))
                                                                {
                                                                    SanteDB.Core.Model.DataTypes.ConceptClass _nretVal = ((SanteDB.Core.Model.DataTypes.ConceptClass)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                    _nretVal.CopyObjectData(_retVal);
                                                                    return _nretVal;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                r.Skip();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.DataTypes.ConceptName"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ConceptNameViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(ConceptNameViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.DataTypes.ConceptName);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ConceptName _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.DataTypes.ConceptName)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.DataTypes.ConceptName)));
            }
            if (context.ShouldSerialize("language"))
            {
                if ((_strong.Language == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "language", _strong.Language, context);
                }
            }
            if (context.ShouldSerialize("value"))
            {
                if ((_strong.Name == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence"))
            {
                if ((_strong.EffectiveVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence"))
            {
                if ((_strong.ObsoleteVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn"))
            {
                context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
            }
            if (context.ShouldSerialize("source"))
            {
                if ((_strong.SourceEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.DataTypes.ConceptName _retVal = new SanteDB.Core.Model.DataTypes.ConceptName();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("source".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.SourceEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("obsoleteVersionSequence".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.ObsoleteVersionSequenceId = ((System.Nullable<long>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("effectiveVersionSequence".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.EffectiveVersionSequenceId = ((System.Nullable<long>)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("value".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.Name = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("language".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("language", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.Language = ((string)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("$type".Equals(r.Value))
                                                {
                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                    if ((_type != typeof(SanteDB.Core.Model.DataTypes.ConceptName)))
                                                    {
                                                        SanteDB.Core.Model.DataTypes.ConceptName _nretVal = ((SanteDB.Core.Model.DataTypes.ConceptName)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                        _nretVal.CopyObjectData(_retVal);
                                                        return _nretVal;
                                                    }
                                                }
                                                else
                                                {
                                                    r.Skip();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.DataTypes.ConceptReferenceTerm"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ConceptReferenceTermViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(ConceptReferenceTermViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.DataTypes.ConceptReferenceTerm);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ConceptReferenceTerm _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.DataTypes.ConceptReferenceTerm)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.DataTypes.ConceptReferenceTerm)));
            }
            if (context.ShouldSerialize("term"))
            {
                if ((_strong.ReferenceTermKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "term", _strong.ReferenceTermKey, context);
                }
            }
            if (context.ShouldSerialize("relationshipType"))
            {
                if ((_strong.RelationshipTypeKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationshipType", _strong.RelationshipTypeKey, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence"))
            {
                if ((_strong.EffectiveVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence"))
            {
                if ((_strong.ObsoleteVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn"))
            {
                context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
            }
            if (context.ShouldSerialize("source"))
            {
                if ((_strong.SourceEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.DataTypes.ConceptReferenceTerm _retVal = new SanteDB.Core.Model.DataTypes.ConceptReferenceTerm();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("source".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.SourceEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("obsoleteVersionSequence".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.ObsoleteVersionSequenceId = ((System.Nullable<long>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("effectiveVersionSequence".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.EffectiveVersionSequenceId = ((System.Nullable<long>)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("relationshipType".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationshipType", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.RelationshipTypeKey = ((System.Nullable<System.Guid>)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("term".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("term", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.ReferenceTermKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("$type".Equals(r.Value))
                                                {
                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                    if ((_type != typeof(SanteDB.Core.Model.DataTypes.ConceptReferenceTerm)))
                                                    {
                                                        SanteDB.Core.Model.DataTypes.ConceptReferenceTerm _nretVal = ((SanteDB.Core.Model.DataTypes.ConceptReferenceTerm)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                        _nretVal.CopyObjectData(_retVal);
                                                        return _nretVal;
                                                    }
                                                }
                                                else
                                                {
                                                    r.Skip();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.DataTypes.ConceptRelationship"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ConceptRelationshipViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(ConceptRelationshipViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.DataTypes.ConceptRelationship);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ConceptRelationship _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.DataTypes.ConceptRelationship)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.DataTypes.ConceptRelationship)));
            }
            if (context.ShouldSerialize("targetConcept"))
            {
                if ((_strong.TargetConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "targetConcept", _strong.TargetConceptKey, context);
                }
            }
            if (context.ShouldSerialize("relationshipType"))
            {
                if ((_strong.RelationshipTypeKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationshipType", _strong.RelationshipTypeKey, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence"))
            {
                if ((_strong.EffectiveVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence"))
            {
                if ((_strong.ObsoleteVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn"))
            {
                context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
            }
            if (context.ShouldSerialize("source"))
            {
                if ((_strong.SourceEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.DataTypes.ConceptRelationship _retVal = new SanteDB.Core.Model.DataTypes.ConceptRelationship();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("source".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.SourceEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("obsoleteVersionSequence".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.ObsoleteVersionSequenceId = ((System.Nullable<long>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("effectiveVersionSequence".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.EffectiveVersionSequenceId = ((System.Nullable<long>)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("relationshipType".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationshipType", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.RelationshipTypeKey = ((System.Nullable<System.Guid>)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("targetConcept".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("targetConcept", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.TargetConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("$type".Equals(r.Value))
                                                {
                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                    if ((_type != typeof(SanteDB.Core.Model.DataTypes.ConceptRelationship)))
                                                    {
                                                        SanteDB.Core.Model.DataTypes.ConceptRelationship _nretVal = ((SanteDB.Core.Model.DataTypes.ConceptRelationship)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                        _nretVal.CopyObjectData(_retVal);
                                                        return _nretVal;
                                                    }
                                                }
                                                else
                                                {
                                                    r.Skip();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.DataTypes.ConceptRelationshipType"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ConceptRelationshipTypeViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(ConceptRelationshipTypeViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.DataTypes.ConceptRelationshipType);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ConceptRelationshipType _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.DataTypes.ConceptRelationshipType)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.DataTypes.ConceptRelationshipType)));
            }
            if (context.ShouldSerialize("name"))
            {
                if ((_strong.Name == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("mnemonic"))
            {
                if ((_strong.Mnemonic == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "mnemonic", _strong.Mnemonic, context);
                }
            }
            if (context.ShouldSerialize("updatedTime"))
            {
                if ((_strong.UpdatedTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy"))
            {
                if ((_strong.UpdatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.DataTypes.ConceptRelationshipType _retVal = new SanteDB.Core.Model.DataTypes.ConceptRelationshipType();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("updatedBy".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.UpdatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("updatedTime".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.UpdatedTimeXml = ((string)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("mnemonic".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("mnemonic", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.Mnemonic = ((string)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("name".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.Name = ((string)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("$type".Equals(r.Value))
                                                            {
                                                                System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                if ((_type != typeof(SanteDB.Core.Model.DataTypes.ConceptRelationshipType)))
                                                                {
                                                                    SanteDB.Core.Model.DataTypes.ConceptRelationshipType _nretVal = ((SanteDB.Core.Model.DataTypes.ConceptRelationshipType)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                    _nretVal.CopyObjectData(_retVal);
                                                                    return _nretVal;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                r.Skip();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.DataTypes.ConceptSet"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ConceptSetViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(ConceptSetViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.DataTypes.ConceptSet);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ConceptSet _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.DataTypes.ConceptSet)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.DataTypes.ConceptSet)));
            }
            if (context.ShouldSerialize("name"))
            {
                if ((_strong.Name == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("mnemonic"))
            {
                if ((_strong.Mnemonic == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "mnemonic", _strong.Mnemonic, context);
                }
            }
            if (context.ShouldSerialize("oid"))
            {
                if ((_strong.Oid == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "oid", _strong.Oid, context);
                }
            }
            if (context.ShouldSerialize("url"))
            {
                if ((_strong.Url == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "url", _strong.Url, context);
                }
            }
            if (context.ShouldSerialize("concept"))
            {
                if (((_strong.ConceptsXml == null)
                            || (_strong.ConceptsXml.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "concept", _strong.ConceptsXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionreasonModel"))
            {
                if ((_strong.ObsoletionReason == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionreasonModel", _strong.ObsoletionReason, context);
                }
            }
            if (context.ShouldSerialize("updatedTime"))
            {
                if ((_strong.UpdatedTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy"))
            {
                if ((_strong.UpdatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.DataTypes.ConceptSet _retVal = new SanteDB.Core.Model.DataTypes.ConceptSet();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("updatedBy".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.UpdatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("updatedTime".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.UpdatedTimeXml = ((string)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("obsoletionreasonModel".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionreasonModel", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.ObsoletionReason = ((string)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("concept".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("concept", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.ConceptsXml = ((System.Collections.Generic.List<System.Guid>)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("url".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("url", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Url = ((string)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("oid".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("oid", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.Oid = ((string)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("mnemonic".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("mnemonic", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.Mnemonic = ((string)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("name".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Name = ((string)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("$type".Equals(r.Value))
                                                                            {
                                                                                System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                if ((_type != typeof(SanteDB.Core.Model.DataTypes.ConceptSet)))
                                                                                {
                                                                                    SanteDB.Core.Model.DataTypes.ConceptSet _nretVal = ((SanteDB.Core.Model.DataTypes.ConceptSet)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                    _nretVal.CopyObjectData(_retVal);
                                                                                    return _nretVal;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                r.Skip();
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.DataTypes.EntityExtension"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class EntityExtensionViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(EntityExtensionViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.DataTypes.EntityExtension);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.EntityExtension _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.DataTypes.EntityExtension)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.DataTypes.EntityExtension)));
            }
            if (context.ShouldSerialize("value"))
            {
                if ((_strong.ExtensionValueXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.ExtensionValueXml, context);
                }
            }
            if (context.ShouldSerialize("extensionType"))
            {
                if ((_strong.ExtensionTypeKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extensionType", _strong.ExtensionTypeKey, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence"))
            {
                if ((_strong.EffectiveVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence"))
            {
                if ((_strong.ObsoleteVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn"))
            {
                context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
            }
            if (context.ShouldSerialize("source"))
            {
                if ((_strong.SourceEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.DataTypes.EntityExtension _retVal = new SanteDB.Core.Model.DataTypes.EntityExtension();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("source".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.SourceEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("obsoleteVersionSequence".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.ObsoleteVersionSequenceId = ((System.Nullable<long>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("effectiveVersionSequence".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.EffectiveVersionSequenceId = ((System.Nullable<long>)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("extensionType".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extensionType", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.ExtensionTypeKey = ((System.Nullable<System.Guid>)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("value".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(byte[]), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.ExtensionValueXml = ((byte[])(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("$type".Equals(r.Value))
                                                {
                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                    if ((_type != typeof(SanteDB.Core.Model.DataTypes.EntityExtension)))
                                                    {
                                                        SanteDB.Core.Model.DataTypes.EntityExtension _nretVal = ((SanteDB.Core.Model.DataTypes.EntityExtension)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                        _nretVal.CopyObjectData(_retVal);
                                                        return _nretVal;
                                                    }
                                                }
                                                else
                                                {
                                                    r.Skip();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.DataTypes.ActExtension"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ActExtensionViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(ActExtensionViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.DataTypes.ActExtension);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ActExtension _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.DataTypes.ActExtension)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.DataTypes.ActExtension)));
            }
            if (context.ShouldSerialize("value"))
            {
                if ((_strong.ExtensionValueXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.ExtensionValueXml, context);
                }
            }
            if (context.ShouldSerialize("extensionType"))
            {
                if ((_strong.ExtensionTypeKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extensionType", _strong.ExtensionTypeKey, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence"))
            {
                if ((_strong.EffectiveVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence"))
            {
                if ((_strong.ObsoleteVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn"))
            {
                context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
            }
            if (context.ShouldSerialize("source"))
            {
                if ((_strong.SourceEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.DataTypes.ActExtension _retVal = new SanteDB.Core.Model.DataTypes.ActExtension();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("source".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.SourceEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("obsoleteVersionSequence".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.ObsoleteVersionSequenceId = ((System.Nullable<long>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("effectiveVersionSequence".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.EffectiveVersionSequenceId = ((System.Nullable<long>)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("extensionType".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extensionType", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.ExtensionTypeKey = ((System.Nullable<System.Guid>)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("value".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(byte[]), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.ExtensionValueXml = ((byte[])(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("$type".Equals(r.Value))
                                                {
                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                    if ((_type != typeof(SanteDB.Core.Model.DataTypes.ActExtension)))
                                                    {
                                                        SanteDB.Core.Model.DataTypes.ActExtension _nretVal = ((SanteDB.Core.Model.DataTypes.ActExtension)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                        _nretVal.CopyObjectData(_retVal);
                                                        return _nretVal;
                                                    }
                                                }
                                                else
                                                {
                                                    r.Skip();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.DataTypes.ExtensionType"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ExtensionTypeViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(ExtensionTypeViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.DataTypes.ExtensionType);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ExtensionType _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.DataTypes.ExtensionType)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.DataTypes.ExtensionType)));
            }
            if (context.ShouldSerialize("handlerClass"))
            {
                if ((_strong.ExtensionHandlerXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "handlerClass", _strong.ExtensionHandlerXml, context);
                }
            }
            if (context.ShouldSerialize("name"))
            {
                if ((_strong.Name == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("updatedTime"))
            {
                if ((_strong.UpdatedTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy"))
            {
                if ((_strong.UpdatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.DataTypes.ExtensionType _retVal = new SanteDB.Core.Model.DataTypes.ExtensionType();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("updatedBy".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.UpdatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("updatedTime".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.UpdatedTimeXml = ((string)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("name".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.Name = ((string)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("handlerClass".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("handlerClass", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.ExtensionHandlerXml = ((string)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("$type".Equals(r.Value))
                                                            {
                                                                System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                if ((_type != typeof(SanteDB.Core.Model.DataTypes.ExtensionType)))
                                                                {
                                                                    SanteDB.Core.Model.DataTypes.ExtensionType _nretVal = ((SanteDB.Core.Model.DataTypes.ExtensionType)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                    _nretVal.CopyObjectData(_retVal);
                                                                    return _nretVal;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                r.Skip();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.DataTypes.GeoTag"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class GeoTagViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(GeoTagViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.DataTypes.GeoTag);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.GeoTag _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.DataTypes.GeoTag)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.DataTypes.GeoTag)));
            }
            if (context.ShouldSerialize("modifiedOn"))
            {
                context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
            }
            if (context.ShouldSerialize("lat"))
            {
                context.JsonContext.WritePropertyUtil(w, "lat", _strong.Lat, context);
            }
            if (context.ShouldSerialize("lng"))
            {
                context.JsonContext.WritePropertyUtil(w, "lng", _strong.Lng, context);
            }
            if (context.ShouldSerialize("precise"))
            {
                if ((_strong.Precise == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "precise", _strong.Precise, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.DataTypes.GeoTag _retVal = new SanteDB.Core.Model.DataTypes.GeoTag();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("precise".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<bool>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("precise", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.Precise = ((System.Nullable<bool>)(_instance));
                                }
                            }
                            else
                            {
                                if ("lng".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(double), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("lng", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.Lng = ((double)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("lat".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(double), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("lat", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.Lat = ((double)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("$type".Equals(r.Value))
                                        {
                                            System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                            if ((_type != typeof(SanteDB.Core.Model.DataTypes.GeoTag)))
                                            {
                                                SanteDB.Core.Model.DataTypes.GeoTag _nretVal = ((SanteDB.Core.Model.DataTypes.GeoTag)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                _nretVal.CopyObjectData(_retVal);
                                                return _nretVal;
                                            }
                                        }
                                        else
                                        {
                                            r.Skip();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.DataTypes.IdentifiedDataReference"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ReferenceViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(ReferenceViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.DataTypes.IdentifiedDataReference);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.IdentifiedDataReference _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.DataTypes.IdentifiedDataReference)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.DataTypes.IdentifiedDataReference)));
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.DataTypes.IdentifiedDataReference _retVal = new SanteDB.Core.Model.DataTypes.IdentifiedDataReference();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("$type".Equals(r.Value))
                            {
                                System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                if ((_type != typeof(SanteDB.Core.Model.DataTypes.IdentifiedDataReference)))
                                {
                                    SanteDB.Core.Model.DataTypes.IdentifiedDataReference _nretVal = ((SanteDB.Core.Model.DataTypes.IdentifiedDataReference)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                    _nretVal.CopyObjectData(_retVal);
                                    return _nretVal;
                                }
                            }
                            else
                            {
                                r.Skip();
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.DataTypes.EntityIdentifier"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class EntityIdentifierViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(EntityIdentifierViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.DataTypes.EntityIdentifier);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.EntityIdentifier _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.DataTypes.EntityIdentifier)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.DataTypes.EntityIdentifier)));
            }
            if (context.ShouldSerialize("value"))
            {
                if ((_strong.Value == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.Value, context);
                }
            }
            if (context.ShouldSerialize("issued"))
            {
                if ((_strong.IssueDateXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "issued", _strong.IssueDateXml, context);
                }
            }
            if (context.ShouldSerialize("expires"))
            {
                if ((_strong.ExpiryDateXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "expires", _strong.ExpiryDateXml, context);
                }
            }
            if (context.ShouldSerialize("checkDigit"))
            {
                if ((_strong.CheckDigit == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "checkDigit", _strong.CheckDigit, context);
                }
            }
            if (context.ShouldSerialize("domain"))
            {
                if ((_strong.IdentityDomainKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "domain", _strong.IdentityDomainKey, context);
                }
            }
            if (context.ShouldSerialize("type"))
            {
                if ((_strong.IdentifierType == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "type", _strong.IdentifierType, context);
                }
            }
            if (context.ShouldSerialize("reliability"))
            {
                context.JsonContext.WritePropertyUtil(w, "reliability", _strong.Reliability, context);
            }
            if (context.ShouldSerialize("effectiveVersionSequence"))
            {
                if ((_strong.EffectiveVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence"))
            {
                if ((_strong.ObsoleteVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn"))
            {
                context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
            }
            if (context.ShouldSerialize("source"))
            {
                if ((_strong.SourceEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.DataTypes.EntityIdentifier _retVal = new SanteDB.Core.Model.DataTypes.EntityIdentifier();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("source".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.SourceEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("obsoleteVersionSequence".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.ObsoleteVersionSequenceId = ((System.Nullable<long>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("effectiveVersionSequence".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.EffectiveVersionSequenceId = ((System.Nullable<long>)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("reliability".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.IdentifierReliability), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("reliability", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.Reliability = ((SanteDB.Core.Model.DataTypes.IdentifierReliability)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("type".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.IdentifierType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("type", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.IdentifierType = ((SanteDB.Core.Model.DataTypes.IdentifierType)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("domain".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("domain", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.IdentityDomainKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("checkDigit".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("checkDigit", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.CheckDigit = ((string)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("expires".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("expires", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.ExpiryDateXml = ((string)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("issued".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("issued", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.IssueDateXml = ((string)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("value".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.Value = ((string)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("$type".Equals(r.Value))
                                                                    {
                                                                        System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                        if ((_type != typeof(SanteDB.Core.Model.DataTypes.EntityIdentifier)))
                                                                        {
                                                                            SanteDB.Core.Model.DataTypes.EntityIdentifier _nretVal = ((SanteDB.Core.Model.DataTypes.EntityIdentifier)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                            _nretVal.CopyObjectData(_retVal);
                                                                            return _nretVal;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        r.Skip();
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.DataTypes.ActIdentifier"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ActIdentifierViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(ActIdentifierViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.DataTypes.ActIdentifier);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ActIdentifier _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.DataTypes.ActIdentifier)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.DataTypes.ActIdentifier)));
            }
            if (context.ShouldSerialize("value"))
            {
                if ((_strong.Value == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.Value, context);
                }
            }
            if (context.ShouldSerialize("issued"))
            {
                if ((_strong.IssueDateXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "issued", _strong.IssueDateXml, context);
                }
            }
            if (context.ShouldSerialize("expires"))
            {
                if ((_strong.ExpiryDateXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "expires", _strong.ExpiryDateXml, context);
                }
            }
            if (context.ShouldSerialize("checkDigit"))
            {
                if ((_strong.CheckDigit == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "checkDigit", _strong.CheckDigit, context);
                }
            }
            if (context.ShouldSerialize("domain"))
            {
                if ((_strong.IdentityDomainKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "domain", _strong.IdentityDomainKey, context);
                }
            }
            if (context.ShouldSerialize("type"))
            {
                if ((_strong.IdentifierType == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "type", _strong.IdentifierType, context);
                }
            }
            if (context.ShouldSerialize("reliability"))
            {
                context.JsonContext.WritePropertyUtil(w, "reliability", _strong.Reliability, context);
            }
            if (context.ShouldSerialize("effectiveVersionSequence"))
            {
                if ((_strong.EffectiveVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence"))
            {
                if ((_strong.ObsoleteVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn"))
            {
                context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
            }
            if (context.ShouldSerialize("source"))
            {
                if ((_strong.SourceEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.DataTypes.ActIdentifier _retVal = new SanteDB.Core.Model.DataTypes.ActIdentifier();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("source".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.SourceEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("obsoleteVersionSequence".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.ObsoleteVersionSequenceId = ((System.Nullable<long>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("effectiveVersionSequence".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.EffectiveVersionSequenceId = ((System.Nullable<long>)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("reliability".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.IdentifierReliability), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("reliability", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.Reliability = ((SanteDB.Core.Model.DataTypes.IdentifierReliability)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("type".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.IdentifierType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("type", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.IdentifierType = ((SanteDB.Core.Model.DataTypes.IdentifierType)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("domain".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("domain", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.IdentityDomainKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("checkDigit".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("checkDigit", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.CheckDigit = ((string)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("expires".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("expires", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.ExpiryDateXml = ((string)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("issued".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("issued", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.IssueDateXml = ((string)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("value".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.Value = ((string)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("$type".Equals(r.Value))
                                                                    {
                                                                        System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                        if ((_type != typeof(SanteDB.Core.Model.DataTypes.ActIdentifier)))
                                                                        {
                                                                            SanteDB.Core.Model.DataTypes.ActIdentifier _nretVal = ((SanteDB.Core.Model.DataTypes.ActIdentifier)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                            _nretVal.CopyObjectData(_retVal);
                                                                            return _nretVal;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        r.Skip();
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.DataTypes.IdentifierType"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class IdentifierTypeViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(IdentifierTypeViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.DataTypes.IdentifierType);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.IdentifierType _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.DataTypes.IdentifierType)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.DataTypes.IdentifierType)));
            }
            if (context.ShouldSerialize("scopeConcept"))
            {
                if ((_strong.ScopeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "scopeConcept", _strong.ScopeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.DataTypes.IdentifierType _retVal = new SanteDB.Core.Model.DataTypes.IdentifierType();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("typeConcept".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("scopeConcept".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("scopeConcept", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.ScopeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("$type".Equals(r.Value))
                                                    {
                                                        System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                        if ((_type != typeof(SanteDB.Core.Model.DataTypes.IdentifierType)))
                                                        {
                                                            SanteDB.Core.Model.DataTypes.IdentifierType _nretVal = ((SanteDB.Core.Model.DataTypes.IdentifierType)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                            _nretVal.CopyObjectData(_retVal);
                                                            return _nretVal;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        r.Skip();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.DataTypes.IdentityDomain"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class IdentityDomainViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(IdentityDomainViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.DataTypes.IdentityDomain);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.IdentityDomain _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.DataTypes.IdentityDomain)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.DataTypes.IdentityDomain)));
            }
            if (context.ShouldSerialize("name"))
            {
                if ((_strong.Name == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("domainName"))
            {
                if ((_strong.DomainName == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "domainName", _strong.DomainName, context);
                }
            }
            if (context.ShouldSerialize("description"))
            {
                if ((_strong.Description == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "description", _strong.Description, context);
                }
            }
            if (context.ShouldSerialize("oid"))
            {
                if ((_strong.Oid == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "oid", _strong.Oid, context);
                }
            }
            if (context.ShouldSerialize("url"))
            {
                if ((_strong.Url == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "url", _strong.Url, context);
                }
            }
            if (context.ShouldSerialize("scope"))
            {
                if (((_strong.AuthorityScopeXml == null)
                            || (_strong.AuthorityScopeXml.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "scope", _strong.AuthorityScopeXml, context);
                }
            }
            if (context.ShouldSerialize("assigningAuthority"))
            {
                if (((_strong.AssigningAuthority == null)
                            || (_strong.AssigningAuthority.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "assigningAuthority", _strong.AssigningAuthority, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if ((_strong.PolicyKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.PolicyKey, context);
                }
            }
            if (context.ShouldSerialize("validation"))
            {
                if ((_strong.ValidationRegex == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "validation", _strong.ValidationRegex, context);
                }
            }
            if (context.ShouldSerialize("isUnique"))
            {
                context.JsonContext.WritePropertyUtil(w, "isUnique", _strong.IsUnique, context);
            }
            if (context.ShouldSerialize("customValidator"))
            {
                if ((_strong.CustomValidator == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "customValidator", _strong.CustomValidator, context);
                }
            }
            if (context.ShouldSerialize("updatedTime"))
            {
                if ((_strong.UpdatedTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy"))
            {
                if ((_strong.UpdatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.DataTypes.IdentityDomain _retVal = new SanteDB.Core.Model.DataTypes.IdentityDomain();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("updatedBy".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.UpdatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("updatedTime".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.UpdatedTimeXml = ((string)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("customValidator".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("customValidator", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.CustomValidator = ((string)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("isUnique".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(bool), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("isUnique", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.IsUnique = ((bool)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("validation".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("validation", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.ValidationRegex = ((string)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("policy".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.PolicyKey = ((System.Nullable<System.Guid>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("assigningAuthority".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.AssigningAuthority>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("assigningAuthority", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.AssigningAuthority = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.AssigningAuthority>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("scope".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("scope", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.AuthorityScopeXml = ((System.Collections.Generic.List<System.Guid>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("url".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("url", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Url = ((string)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("oid".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("oid", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.Oid = ((string)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("description".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("description", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Description = ((string)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("domainName".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("domainName", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.DomainName = ((string)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("name".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.Name = ((string)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("$type".Equals(r.Value))
                                                                                                {
                                                                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                    if ((_type != typeof(SanteDB.Core.Model.DataTypes.IdentityDomain)))
                                                                                                    {
                                                                                                        SanteDB.Core.Model.DataTypes.IdentityDomain _nretVal = ((SanteDB.Core.Model.DataTypes.IdentityDomain)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                        _nretVal.CopyObjectData(_retVal);
                                                                                                        return _nretVal;
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    r.Skip();
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.DataTypes.EntityNote"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class EntityNoteViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(EntityNoteViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.DataTypes.EntityNote);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.EntityNote _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.DataTypes.EntityNote)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.DataTypes.EntityNote)));
            }
            if (context.ShouldSerialize("text"))
            {
                if ((_strong.Text == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "text", _strong.Text, context);
                }
            }
            if (context.ShouldSerialize("author"))
            {
                if ((_strong.AuthorKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "author", _strong.AuthorKey, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence"))
            {
                if ((_strong.EffectiveVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence"))
            {
                if ((_strong.ObsoleteVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn"))
            {
                context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
            }
            if (context.ShouldSerialize("source"))
            {
                if ((_strong.SourceEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.DataTypes.EntityNote _retVal = new SanteDB.Core.Model.DataTypes.EntityNote();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("source".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.SourceEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("obsoleteVersionSequence".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.ObsoleteVersionSequenceId = ((System.Nullable<long>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("effectiveVersionSequence".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.EffectiveVersionSequenceId = ((System.Nullable<long>)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("author".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("author", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.AuthorKey = ((System.Nullable<System.Guid>)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("text".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("text", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.Text = ((string)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("$type".Equals(r.Value))
                                                {
                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                    if ((_type != typeof(SanteDB.Core.Model.DataTypes.EntityNote)))
                                                    {
                                                        SanteDB.Core.Model.DataTypes.EntityNote _nretVal = ((SanteDB.Core.Model.DataTypes.EntityNote)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                        _nretVal.CopyObjectData(_retVal);
                                                        return _nretVal;
                                                    }
                                                }
                                                else
                                                {
                                                    r.Skip();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.DataTypes.ActNote"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ActNoteViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(ActNoteViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.DataTypes.ActNote);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ActNote _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.DataTypes.ActNote)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.DataTypes.ActNote)));
            }
            if (context.ShouldSerialize("text"))
            {
                if ((_strong.Text == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "text", _strong.Text, context);
                }
            }
            if (context.ShouldSerialize("author"))
            {
                if ((_strong.AuthorKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "author", _strong.AuthorKey, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence"))
            {
                if ((_strong.EffectiveVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence"))
            {
                if ((_strong.ObsoleteVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn"))
            {
                context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
            }
            if (context.ShouldSerialize("source"))
            {
                if ((_strong.SourceEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.DataTypes.ActNote _retVal = new SanteDB.Core.Model.DataTypes.ActNote();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("source".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.SourceEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("obsoleteVersionSequence".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.ObsoleteVersionSequenceId = ((System.Nullable<long>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("effectiveVersionSequence".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.EffectiveVersionSequenceId = ((System.Nullable<long>)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("author".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("author", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.AuthorKey = ((System.Nullable<System.Guid>)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("text".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("text", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.Text = ((string)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("$type".Equals(r.Value))
                                                {
                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                    if ((_type != typeof(SanteDB.Core.Model.DataTypes.ActNote)))
                                                    {
                                                        SanteDB.Core.Model.DataTypes.ActNote _nretVal = ((SanteDB.Core.Model.DataTypes.ActNote)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                        _nretVal.CopyObjectData(_retVal);
                                                        return _nretVal;
                                                    }
                                                }
                                                else
                                                {
                                                    r.Skip();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.DataTypes.ReferenceTerm"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ReferenceTermViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(ReferenceTermViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.DataTypes.ReferenceTerm);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ReferenceTerm _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.DataTypes.ReferenceTerm)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.DataTypes.ReferenceTerm)));
            }
            if (context.ShouldSerialize("mnemonic"))
            {
                if ((_strong.Mnemonic == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "mnemonic", _strong.Mnemonic, context);
                }
            }
            if (context.ShouldSerialize("codeSystem"))
            {
                if ((_strong.CodeSystemKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "codeSystem", _strong.CodeSystemKey, context);
                }
            }
            if (context.ShouldSerialize("name"))
            {
                if (((_strong.DisplayNames == null)
                            || (_strong.DisplayNames.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.DisplayNames, context);
                }
            }
            if (context.ShouldSerialize("updatedTime"))
            {
                if ((_strong.UpdatedTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy"))
            {
                if ((_strong.UpdatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.DataTypes.ReferenceTerm _retVal = new SanteDB.Core.Model.DataTypes.ReferenceTerm();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("updatedBy".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.UpdatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("updatedTime".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.UpdatedTimeXml = ((string)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("name".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ReferenceTermName>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.DisplayNames = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ReferenceTermName>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("codeSystem".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("codeSystem", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.CodeSystemKey = ((System.Nullable<System.Guid>)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("mnemonic".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("mnemonic", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Mnemonic = ((string)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("$type".Equals(r.Value))
                                                                {
                                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                    if ((_type != typeof(SanteDB.Core.Model.DataTypes.ReferenceTerm)))
                                                                    {
                                                                        SanteDB.Core.Model.DataTypes.ReferenceTerm _nretVal = ((SanteDB.Core.Model.DataTypes.ReferenceTerm)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                        _nretVal.CopyObjectData(_retVal);
                                                                        return _nretVal;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    r.Skip();
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.DataTypes.ReferenceTermName"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ReferenceTermNameViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(ReferenceTermNameViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.DataTypes.ReferenceTermName);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ReferenceTermName _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.DataTypes.ReferenceTermName)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.DataTypes.ReferenceTermName)));
            }
            if (context.ShouldSerialize("language"))
            {
                if ((_strong.Language == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "language", _strong.Language, context);
                }
            }
            if (context.ShouldSerialize("value"))
            {
                if ((_strong.Name == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("source"))
            {
                if ((_strong.SourceEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.DataTypes.ReferenceTermName _retVal = new SanteDB.Core.Model.DataTypes.ReferenceTermName();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("source".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.SourceEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("value".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.Name = ((string)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("language".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("language", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.Language = ((string)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("$type".Equals(r.Value))
                                                        {
                                                            System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                            if ((_type != typeof(SanteDB.Core.Model.DataTypes.ReferenceTermName)))
                                                            {
                                                                SanteDB.Core.Model.DataTypes.ReferenceTermName _nretVal = ((SanteDB.Core.Model.DataTypes.ReferenceTermName)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                _nretVal.CopyObjectData(_retVal);
                                                                return _nretVal;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            r.Skip();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.DataTypes.EntityTag"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class EntityTagViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(EntityTagViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.DataTypes.EntityTag);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.EntityTag _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.DataTypes.EntityTag)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.DataTypes.EntityTag)));
            }
            if (context.ShouldSerialize("key"))
            {
                if ((_strong.TagKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "key", _strong.TagKey, context);
                }
            }
            if (context.ShouldSerialize("value"))
            {
                if ((_strong.Value == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.Value, context);
                }
            }
            if (context.ShouldSerialize("source"))
            {
                if ((_strong.SourceEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.DataTypes.EntityTag _retVal = new SanteDB.Core.Model.DataTypes.EntityTag();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("source".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.SourceEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("value".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.Value = ((string)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("key".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("key", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.TagKey = ((string)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("$type".Equals(r.Value))
                                                        {
                                                            System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                            if ((_type != typeof(SanteDB.Core.Model.DataTypes.EntityTag)))
                                                            {
                                                                SanteDB.Core.Model.DataTypes.EntityTag _nretVal = ((SanteDB.Core.Model.DataTypes.EntityTag)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                _nretVal.CopyObjectData(_retVal);
                                                                return _nretVal;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            r.Skip();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.DataTypes.ActTag"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ActTagViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(ActTagViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.DataTypes.ActTag);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ActTag _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.DataTypes.ActTag)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.DataTypes.ActTag)));
            }
            if (context.ShouldSerialize("key"))
            {
                if ((_strong.TagKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "key", _strong.TagKey, context);
                }
            }
            if (context.ShouldSerialize("value"))
            {
                if ((_strong.Value == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.Value, context);
                }
            }
            if (context.ShouldSerialize("source"))
            {
                if ((_strong.SourceEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.DataTypes.ActTag _retVal = new SanteDB.Core.Model.DataTypes.ActTag();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("source".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.SourceEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("value".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.Value = ((string)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("key".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("key", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.TagKey = ((string)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("$type".Equals(r.Value))
                                                        {
                                                            System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                            if ((_type != typeof(SanteDB.Core.Model.DataTypes.ActTag)))
                                                            {
                                                                SanteDB.Core.Model.DataTypes.ActTag _nretVal = ((SanteDB.Core.Model.DataTypes.ActTag)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                _nretVal.CopyObjectData(_retVal);
                                                                return _nretVal;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            r.Skip();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.DataTypes.TemplateDefinition"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class TemplateDefinitionViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(TemplateDefinitionViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.DataTypes.TemplateDefinition);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.TemplateDefinition _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.DataTypes.TemplateDefinition)));
            }
            if (context.ShouldSerialize("mnemonic"))
            {
                if ((_strong.Mnemonic == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "mnemonic", _strong.Mnemonic, context);
                }
            }
            if (context.ShouldSerialize("name"))
            {
                if ((_strong.Name == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("oid"))
            {
                if ((_strong.Oid == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "oid", _strong.Oid, context);
                }
            }
            if (context.ShouldSerialize("description"))
            {
                if ((_strong.Description == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "description", _strong.Description, context);
                }
            }
            if (context.ShouldSerialize("updatedTime"))
            {
                if ((_strong.UpdatedTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy"))
            {
                if ((_strong.UpdatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.DataTypes.TemplateDefinition _retVal = new SanteDB.Core.Model.DataTypes.TemplateDefinition();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("updatedBy".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.UpdatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("updatedTime".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.UpdatedTimeXml = ((string)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("description".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("description", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.Description = ((string)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("oid".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("oid", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.Oid = ((string)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("name".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Name = ((string)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("mnemonic".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("mnemonic", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.Mnemonic = ((string)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("$type".Equals(r.Value))
                                                                    {
                                                                        System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                        if ((_type != typeof(SanteDB.Core.Model.DataTypes.TemplateDefinition)))
                                                                        {
                                                                            SanteDB.Core.Model.DataTypes.TemplateDefinition _nretVal = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                            _nretVal.CopyObjectData(_retVal);
                                                                            return _nretVal;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        r.Skip();
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Collection.Bundle"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class BundleViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(BundleViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Collection.Bundle);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Collection.Bundle _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Collection.Bundle)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Collection.Bundle)));
            }
            if (context.ShouldSerialize("modifiedOn"))
            {
                context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
            }
            if (context.ShouldSerialize("resource"))
            {
                if (((_strong.Item == null)
                            || (_strong.Item.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "resource", _strong.Item, context);
                }
            }
            if (context.ShouldSerialize("focal"))
            {
                if (((_strong.FocalObjects == null)
                            || (_strong.FocalObjects.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "focal", _strong.FocalObjects, context);
                }
            }
            if (context.ShouldSerialize("offset"))
            {
                context.JsonContext.WritePropertyUtil(w, "offset", _strong.Offset, context);
            }
            if (context.ShouldSerialize("count"))
            {
                context.JsonContext.WritePropertyUtil(w, "count", _strong.Count, context);
            }
            if (context.ShouldSerialize("totalResults"))
            {
                if ((_strong.TotalResults == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "totalResults", _strong.TotalResults, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Collection.Bundle _retVal = new SanteDB.Core.Model.Collection.Bundle();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("totalResults".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<int>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("totalResults", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.TotalResults = ((System.Nullable<int>)(_instance));
                                }
                            }
                            else
                            {
                                if ("count".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(int), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("count", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.Count = ((int)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("offset".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(int), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("offset", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.Offset = ((int)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("focal".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("focal", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.FocalObjects = ((System.Collections.Generic.List<System.Guid>)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("resource".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.IdentifiedData>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("resource", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.Item = ((System.Collections.Generic.List<SanteDB.Core.Model.IdentifiedData>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("$type".Equals(r.Value))
                                                {
                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                    if ((_type != typeof(SanteDB.Core.Model.Collection.Bundle)))
                                                    {
                                                        SanteDB.Core.Model.Collection.Bundle _nretVal = ((SanteDB.Core.Model.Collection.Bundle)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                        _nretVal.CopyObjectData(_retVal);
                                                        return _nretVal;
                                                    }
                                                }
                                                else
                                                {
                                                    r.Skip();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Audit.AuditEventData"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class AuditEventDataViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(AuditEventDataViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Audit.AuditEventData);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Audit.AuditEventData _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Audit.AuditEventData)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Audit.AuditEventData)));
            }
            if (context.ShouldSerialize("action"))
            {
                context.JsonContext.WritePropertyUtil(w, "action", _strong.ActionCode, context);
            }
            if (context.ShouldSerialize("actor"))
            {
                if (((_strong.Actors == null)
                            || (_strong.Actors.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "actor", _strong.Actors, context);
                }
            }
            if (context.ShouldSerialize("object"))
            {
                if (((_strong.AuditableObjects == null)
                            || (_strong.AuditableObjects.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "object", _strong.AuditableObjects, context);
                }
            }
            if (context.ShouldSerialize("event"))
            {
                context.JsonContext.WritePropertyUtil(w, "event", _strong.EventIdentifier, context);
            }
            if (context.ShouldSerialize("type"))
            {
                if ((_strong.EventTypeCode == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "type", _strong.EventTypeCode, context);
                }
            }
            if (context.ShouldSerialize("outcome"))
            {
                context.JsonContext.WritePropertyUtil(w, "outcome", _strong.Outcome, context);
            }
            if (context.ShouldSerialize("timestamp"))
            {
                if ((_strong.TimestampXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "timestamp", _strong.TimestampXml, context);
                }
            }
            if (context.ShouldSerialize("meta"))
            {
                if (((_strong.Metadata == null)
                            || (_strong.Metadata.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "meta", _strong.Metadata, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn"))
            {
                context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Audit.AuditEventData _retVal = new SanteDB.Core.Model.Audit.AuditEventData();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("meta".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Audit.AuditMetadata>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("meta", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.Metadata = ((System.Collections.Generic.List<SanteDB.Core.Model.Audit.AuditMetadata>)(_instance));
                                }
                            }
                            else
                            {
                                if ("timestamp".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("timestamp", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.TimestampXml = ((string)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("outcome".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.Audit.OutcomeIndicator), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("outcome", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.Outcome = ((SanteDB.Core.Model.Audit.OutcomeIndicator)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("type".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.Audit.AuditCode), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("type", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.EventTypeCode = ((SanteDB.Core.Model.Audit.AuditCode)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("event".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.Audit.EventIdentifierType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("event", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.EventIdentifier = ((SanteDB.Core.Model.Audit.EventIdentifierType)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("object".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Audit.AuditableObject>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("object", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.AuditableObjects = ((System.Collections.Generic.List<SanteDB.Core.Model.Audit.AuditableObject>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("actor".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Audit.AuditActorData>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("actor", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.Actors = ((System.Collections.Generic.List<SanteDB.Core.Model.Audit.AuditActorData>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("action".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.Audit.ActionType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("action", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.ActionCode = ((SanteDB.Core.Model.Audit.ActionType)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("$type".Equals(r.Value))
                                                            {
                                                                System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                if ((_type != typeof(SanteDB.Core.Model.Audit.AuditEventData)))
                                                                {
                                                                    SanteDB.Core.Model.Audit.AuditEventData _nretVal = ((SanteDB.Core.Model.Audit.AuditEventData)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                    _nretVal.CopyObjectData(_retVal);
                                                                    return _nretVal;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                r.Skip();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Acts.Account"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class AccountViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(AccountViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Acts.Account);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.Account _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Acts.Account)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Acts.Account)));
            }
            if (context.ShouldSerialize("balance"))
            {
                context.JsonContext.WritePropertyUtil(w, "balance", _strong.Balance, context);
            }
            if (context.ShouldSerialize("currency"))
            {
                if ((_strong.CurrencyKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "currency", _strong.CurrencyKey, context);
                }
            }
            if (context.ShouldSerialize("minBalance"))
            {
                if ((_strong.MinBalance == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "minBalance", _strong.MinBalance, context);
                }
            }
            if (context.ShouldSerialize("maxBalance"))
            {
                context.JsonContext.WritePropertyUtil(w, "maxBalance", _strong.MaxBalance, context);
            }
            if (context.ShouldSerialize("isNegated"))
            {
                context.JsonContext.WritePropertyUtil(w, "isNegated", _strong.IsNegated, context);
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("actTime"))
            {
                if ((_strong.ActTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "actTime", _strong.ActTimeXml, context);
                }
            }
            if (context.ShouldSerialize("startTime"))
            {
                if ((_strong.StartTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "startTime", _strong.StartTimeXml, context);
                }
            }
            if (context.ShouldSerialize("stopTime"))
            {
                if ((_strong.StopTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "stopTime", _strong.StopTimeXml, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("moodConcept"))
            {
                if ((_strong.MoodConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "moodConcept", _strong.MoodConceptKey, context);
                }
            }
            if (context.ShouldSerialize("reasonConcept"))
            {
                if ((_strong.ReasonConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "reasonConcept", _strong.ReasonConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("protocol"))
            {
                if (((_strong.Protocols == null)
                            || (_strong.Protocols.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "protocol", _strong.Protocols, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Acts.Account _retVal = new SanteDB.Core.Model.Acts.Account();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("participation".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("protocol".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("protocol", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.Protocols = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("tag".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("note".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("extension".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("policy".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("identifier".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("typeConcept".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("statusConcept".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("reasonConcept".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConcept", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.ReasonConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("moodConcept".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConcept", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.MoodConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("classConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("stopTime".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("stopTime", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.StopTimeXml = ((string)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("startTime".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("startTime", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.StartTimeXml = ((string)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("actTime".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("actTime", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.ActTimeXml = ((string)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("template".Equals(r.Value))
                                                                                                                            {
                                                                                                                                r.Read();
                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                                                                                if ((_instance != null))
                                                                                                                                {
                                                                                                                                    _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ("isNegated".Equals(r.Value))
                                                                                                                                {
                                                                                                                                    r.Read();
                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(bool), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("isNegated", context.JsonContext, _retVal, context));
                                                                                                                                    if ((_instance != null))
                                                                                                                                    {
                                                                                                                                        _retVal.IsNegated = ((bool)(_instance));
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    if ("maxBalance".Equals(r.Value))
                                                                                                                                    {
                                                                                                                                        r.Read();
                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(decimal), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("maxBalance", context.JsonContext, _retVal, context));
                                                                                                                                        if ((_instance != null))
                                                                                                                                        {
                                                                                                                                            _retVal.MaxBalance = ((decimal)(_instance));
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        if ("minBalance".Equals(r.Value))
                                                                                                                                        {
                                                                                                                                            r.Read();
                                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("minBalance", context.JsonContext, _retVal, context));
                                                                                                                                            if ((_instance != null))
                                                                                                                                            {
                                                                                                                                                _retVal.MinBalance = ((System.Nullable<decimal>)(_instance));
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                        {
                                                                                                                                            if ("currency".Equals(r.Value))
                                                                                                                                            {
                                                                                                                                                r.Read();
                                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("currency", context.JsonContext, _retVal, context));
                                                                                                                                                if ((_instance != null))
                                                                                                                                                {
                                                                                                                                                    _retVal.CurrencyKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                                if ("balance".Equals(r.Value))
                                                                                                                                                {
                                                                                                                                                    r.Read();
                                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(decimal), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("balance", context.JsonContext, _retVal, context));
                                                                                                                                                    if ((_instance != null))
                                                                                                                                                    {
                                                                                                                                                        _retVal.Balance = ((decimal)(_instance));
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else
                                                                                                                                                {
                                                                                                                                                    if ("$type".Equals(r.Value))
                                                                                                                                                    {
                                                                                                                                                        System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                        if ((_type != typeof(SanteDB.Core.Model.Acts.Account)))
                                                                                                                                                        {
                                                                                                                                                            SanteDB.Core.Model.Acts.Account _nretVal = ((SanteDB.Core.Model.Acts.Account)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                            _nretVal.CopyObjectData(_retVal);
                                                                                                                                                            return _nretVal;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else
                                                                                                                                                    {
                                                                                                                                                        r.Skip();
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Acts.Act"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ActViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(ActViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Acts.Act);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.Act _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Acts.Act)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Acts.Act)));
            }
            if (context.ShouldSerialize("isNegated"))
            {
                context.JsonContext.WritePropertyUtil(w, "isNegated", _strong.IsNegated, context);
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("actTime"))
            {
                if ((_strong.ActTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "actTime", _strong.ActTimeXml, context);
                }
            }
            if (context.ShouldSerialize("startTime"))
            {
                if ((_strong.StartTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "startTime", _strong.StartTimeXml, context);
                }
            }
            if (context.ShouldSerialize("stopTime"))
            {
                if ((_strong.StopTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "stopTime", _strong.StopTimeXml, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("moodConcept"))
            {
                if ((_strong.MoodConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "moodConcept", _strong.MoodConceptKey, context);
                }
            }
            if (context.ShouldSerialize("reasonConcept"))
            {
                if ((_strong.ReasonConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "reasonConcept", _strong.ReasonConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("protocol"))
            {
                if (((_strong.Protocols == null)
                            || (_strong.Protocols.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "protocol", _strong.Protocols, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Acts.Act _retVal = new SanteDB.Core.Model.Acts.Act();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("participation".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("protocol".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("protocol", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.Protocols = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("tag".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("note".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("extension".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("policy".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("identifier".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("typeConcept".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("statusConcept".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("reasonConcept".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConcept", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.ReasonConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("moodConcept".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConcept", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.MoodConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("classConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("stopTime".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("stopTime", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.StopTimeXml = ((string)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("startTime".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("startTime", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.StartTimeXml = ((string)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("actTime".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("actTime", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.ActTimeXml = ((string)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("template".Equals(r.Value))
                                                                                                                            {
                                                                                                                                r.Read();
                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                                                                                if ((_instance != null))
                                                                                                                                {
                                                                                                                                    _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ("isNegated".Equals(r.Value))
                                                                                                                                {
                                                                                                                                    r.Read();
                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(bool), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("isNegated", context.JsonContext, _retVal, context));
                                                                                                                                    if ((_instance != null))
                                                                                                                                    {
                                                                                                                                        _retVal.IsNegated = ((bool)(_instance));
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    if ("$type".Equals(r.Value))
                                                                                                                                    {
                                                                                                                                        System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                        if ((_type != typeof(SanteDB.Core.Model.Acts.Act)))
                                                                                                                                        {
                                                                                                                                            SanteDB.Core.Model.Acts.Act _nretVal = ((SanteDB.Core.Model.Acts.Act)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                            _nretVal.CopyObjectData(_retVal);
                                                                                                                                            return _nretVal;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        r.Skip();
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Acts.ActParticipation"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ActParticipationViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(ActParticipationViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Acts.ActParticipation);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.ActParticipation _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Acts.ActParticipation)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Acts.ActParticipation)));
            }
            if (context.ShouldSerialize("classification"))
            {
                if ((_strong.ClassificationKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classification", _strong.ClassificationKey, context);
                }
            }
            if (context.ShouldSerialize("player"))
            {
                if ((_strong.PlayerEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "player", _strong.PlayerEntityKey, context);
                }
            }
            if (context.ShouldSerialize("participationRole"))
            {
                if ((_strong.ParticipationRoleKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participationRole", _strong.ParticipationRoleKey, context);
                }
            }
            if (context.ShouldSerialize("act"))
            {
                if ((_strong.ActKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "act", _strong.ActKey, context);
                }
            }
            if (context.ShouldSerialize("quantity"))
            {
                if ((_strong.Quantity == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "quantity", _strong.Quantity, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence"))
            {
                if ((_strong.EffectiveVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence"))
            {
                if ((_strong.ObsoleteVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn"))
            {
                context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
            }
            if (context.ShouldSerialize("source"))
            {
                if ((_strong.SourceEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Acts.ActParticipation _retVal = new SanteDB.Core.Model.Acts.ActParticipation();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("source".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.SourceEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("obsoleteVersionSequence".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.ObsoleteVersionSequenceId = ((System.Nullable<long>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("effectiveVersionSequence".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.EffectiveVersionSequenceId = ((System.Nullable<long>)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("quantity".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<int>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("quantity", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.Quantity = ((System.Nullable<int>)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("act".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("act", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.ActKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("participationRole".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participationRole", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.ParticipationRoleKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("player".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("player", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PlayerEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("classification".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classification", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.ClassificationKey = ((System.Nullable<System.Guid>)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("$type".Equals(r.Value))
                                                            {
                                                                System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                if ((_type != typeof(SanteDB.Core.Model.Acts.ActParticipation)))
                                                                {
                                                                    SanteDB.Core.Model.Acts.ActParticipation _nretVal = ((SanteDB.Core.Model.Acts.ActParticipation)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                    _nretVal.CopyObjectData(_retVal);
                                                                    return _nretVal;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                r.Skip();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Acts.ActProtocol"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ActProtocolViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(ActProtocolViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Acts.ActProtocol);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.ActProtocol _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Acts.ActProtocol)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Acts.ActProtocol)));
            }
            if (context.ShouldSerialize("protocol"))
            {
                if ((_strong.ProtocolKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "protocol", _strong.ProtocolKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.Version == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.Version, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                context.JsonContext.WritePropertyUtil(w, "sequence", _strong.Sequence, context);
            }
            if (context.ShouldSerialize("state"))
            {
                if ((_strong.StateData == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "state", _strong.StateData, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn"))
            {
                context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
            }
            if (context.ShouldSerialize("source"))
            {
                if ((_strong.SourceEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Acts.ActProtocol _retVal = new SanteDB.Core.Model.Acts.ActProtocol();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("source".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.SourceEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("state".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(byte[]), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("state", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.StateData = ((byte[])(_instance));
                                    }
                                }
                                else
                                {
                                    if ("sequence".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(int), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.Sequence = ((int)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("version".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.Version = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("protocol".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("protocol", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.ProtocolKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("$type".Equals(r.Value))
                                                {
                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                    if ((_type != typeof(SanteDB.Core.Model.Acts.ActProtocol)))
                                                    {
                                                        SanteDB.Core.Model.Acts.ActProtocol _nretVal = ((SanteDB.Core.Model.Acts.ActProtocol)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                        _nretVal.CopyObjectData(_retVal);
                                                        return _nretVal;
                                                    }
                                                }
                                                else
                                                {
                                                    r.Skip();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Acts.ActRelationship"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ActRelationshipViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(ActRelationshipViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Acts.ActRelationship);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.ActRelationship _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Acts.ActRelationship)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Acts.ActRelationship)));
            }
            if (context.ShouldSerialize("classification"))
            {
                if ((_strong.ClassificationKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classification", _strong.ClassificationKey, context);
                }
            }
            if (context.ShouldSerialize("target"))
            {
                if ((_strong.TargetActKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "target", _strong.TargetActKey, context);
                }
            }
            if (context.ShouldSerialize("relationshipType"))
            {
                if ((_strong.RelationshipTypeKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationshipType", _strong.RelationshipTypeKey, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence"))
            {
                if ((_strong.EffectiveVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence"))
            {
                if ((_strong.ObsoleteVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn"))
            {
                context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
            }
            if (context.ShouldSerialize("source"))
            {
                if ((_strong.SourceEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Acts.ActRelationship _retVal = new SanteDB.Core.Model.Acts.ActRelationship();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("source".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.SourceEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("obsoleteVersionSequence".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.ObsoleteVersionSequenceId = ((System.Nullable<long>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("effectiveVersionSequence".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.EffectiveVersionSequenceId = ((System.Nullable<long>)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("relationshipType".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationshipType", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.RelationshipTypeKey = ((System.Nullable<System.Guid>)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("target".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("target", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.TargetActKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("classification".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classification", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.ClassificationKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("$type".Equals(r.Value))
                                                    {
                                                        System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                        if ((_type != typeof(SanteDB.Core.Model.Acts.ActRelationship)))
                                                        {
                                                            SanteDB.Core.Model.Acts.ActRelationship _nretVal = ((SanteDB.Core.Model.Acts.ActRelationship)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                            _nretVal.CopyObjectData(_retVal);
                                                            return _nretVal;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        r.Skip();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Acts.CarePlan"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class CarePlanViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(CarePlanViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Acts.CarePlan);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.CarePlan _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Acts.CarePlan)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Acts.CarePlan)));
            }
            if (context.ShouldSerialize("isNegated"))
            {
                context.JsonContext.WritePropertyUtil(w, "isNegated", _strong.IsNegated, context);
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("actTime"))
            {
                if ((_strong.ActTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "actTime", _strong.ActTimeXml, context);
                }
            }
            if (context.ShouldSerialize("startTime"))
            {
                if ((_strong.StartTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "startTime", _strong.StartTimeXml, context);
                }
            }
            if (context.ShouldSerialize("stopTime"))
            {
                if ((_strong.StopTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "stopTime", _strong.StopTimeXml, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("moodConcept"))
            {
                if ((_strong.MoodConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "moodConcept", _strong.MoodConceptKey, context);
                }
            }
            if (context.ShouldSerialize("reasonConcept"))
            {
                if ((_strong.ReasonConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "reasonConcept", _strong.ReasonConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("protocol"))
            {
                if (((_strong.Protocols == null)
                            || (_strong.Protocols.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "protocol", _strong.Protocols, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Acts.CarePlan _retVal = new SanteDB.Core.Model.Acts.CarePlan();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("participation".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("protocol".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("protocol", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.Protocols = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("tag".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("note".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("extension".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("policy".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("identifier".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("typeConcept".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("statusConcept".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("reasonConcept".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConcept", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.ReasonConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("moodConcept".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConcept", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.MoodConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("classConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("stopTime".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("stopTime", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.StopTimeXml = ((string)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("startTime".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("startTime", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.StartTimeXml = ((string)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("actTime".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("actTime", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.ActTimeXml = ((string)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("template".Equals(r.Value))
                                                                                                                            {
                                                                                                                                r.Read();
                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                                                                                if ((_instance != null))
                                                                                                                                {
                                                                                                                                    _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ("isNegated".Equals(r.Value))
                                                                                                                                {
                                                                                                                                    r.Read();
                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(bool), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("isNegated", context.JsonContext, _retVal, context));
                                                                                                                                    if ((_instance != null))
                                                                                                                                    {
                                                                                                                                        _retVal.IsNegated = ((bool)(_instance));
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    if ("$type".Equals(r.Value))
                                                                                                                                    {
                                                                                                                                        System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                        if ((_type != typeof(SanteDB.Core.Model.Acts.CarePlan)))
                                                                                                                                        {
                                                                                                                                            SanteDB.Core.Model.Acts.CarePlan _nretVal = ((SanteDB.Core.Model.Acts.CarePlan)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                            _nretVal.CopyObjectData(_retVal);
                                                                                                                                            return _nretVal;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        r.Skip();
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Acts.ControlAct"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ControlActViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(ControlActViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Acts.ControlAct);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.ControlAct _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Acts.ControlAct)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Acts.ControlAct)));
            }
            if (context.ShouldSerialize("isNegated"))
            {
                context.JsonContext.WritePropertyUtil(w, "isNegated", _strong.IsNegated, context);
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("actTime"))
            {
                if ((_strong.ActTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "actTime", _strong.ActTimeXml, context);
                }
            }
            if (context.ShouldSerialize("startTime"))
            {
                if ((_strong.StartTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "startTime", _strong.StartTimeXml, context);
                }
            }
            if (context.ShouldSerialize("stopTime"))
            {
                if ((_strong.StopTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "stopTime", _strong.StopTimeXml, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("moodConcept"))
            {
                if ((_strong.MoodConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "moodConcept", _strong.MoodConceptKey, context);
                }
            }
            if (context.ShouldSerialize("reasonConcept"))
            {
                if ((_strong.ReasonConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "reasonConcept", _strong.ReasonConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("protocol"))
            {
                if (((_strong.Protocols == null)
                            || (_strong.Protocols.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "protocol", _strong.Protocols, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Acts.ControlAct _retVal = new SanteDB.Core.Model.Acts.ControlAct();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("participation".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("protocol".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("protocol", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.Protocols = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("tag".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("note".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("extension".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("policy".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("identifier".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("typeConcept".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("statusConcept".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("reasonConcept".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConcept", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.ReasonConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("moodConcept".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConcept", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.MoodConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("classConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("stopTime".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("stopTime", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.StopTimeXml = ((string)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("startTime".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("startTime", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.StartTimeXml = ((string)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("actTime".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("actTime", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.ActTimeXml = ((string)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("template".Equals(r.Value))
                                                                                                                            {
                                                                                                                                r.Read();
                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                                                                                if ((_instance != null))
                                                                                                                                {
                                                                                                                                    _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ("isNegated".Equals(r.Value))
                                                                                                                                {
                                                                                                                                    r.Read();
                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(bool), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("isNegated", context.JsonContext, _retVal, context));
                                                                                                                                    if ((_instance != null))
                                                                                                                                    {
                                                                                                                                        _retVal.IsNegated = ((bool)(_instance));
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    if ("$type".Equals(r.Value))
                                                                                                                                    {
                                                                                                                                        System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                        if ((_type != typeof(SanteDB.Core.Model.Acts.ControlAct)))
                                                                                                                                        {
                                                                                                                                            SanteDB.Core.Model.Acts.ControlAct _nretVal = ((SanteDB.Core.Model.Acts.ControlAct)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                            _nretVal.CopyObjectData(_retVal);
                                                                                                                                            return _nretVal;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        r.Skip();
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Acts.FinancialContract"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class FinancialContractViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(FinancialContractViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Acts.FinancialContract);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.FinancialContract _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Acts.FinancialContract)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Acts.FinancialContract)));
            }
            if (context.ShouldSerialize("paymentTerms"))
            {
                if ((_strong.PaymentTermsKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "paymentTerms", _strong.PaymentTermsKey, context);
                }
            }
            if (context.ShouldSerialize("isNegated"))
            {
                context.JsonContext.WritePropertyUtil(w, "isNegated", _strong.IsNegated, context);
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("actTime"))
            {
                if ((_strong.ActTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "actTime", _strong.ActTimeXml, context);
                }
            }
            if (context.ShouldSerialize("startTime"))
            {
                if ((_strong.StartTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "startTime", _strong.StartTimeXml, context);
                }
            }
            if (context.ShouldSerialize("stopTime"))
            {
                if ((_strong.StopTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "stopTime", _strong.StopTimeXml, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("moodConcept"))
            {
                if ((_strong.MoodConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "moodConcept", _strong.MoodConceptKey, context);
                }
            }
            if (context.ShouldSerialize("reasonConcept"))
            {
                if ((_strong.ReasonConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "reasonConcept", _strong.ReasonConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("protocol"))
            {
                if (((_strong.Protocols == null)
                            || (_strong.Protocols.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "protocol", _strong.Protocols, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Acts.FinancialContract _retVal = new SanteDB.Core.Model.Acts.FinancialContract();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("participation".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("protocol".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("protocol", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.Protocols = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("tag".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("note".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("extension".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("policy".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("identifier".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("typeConcept".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("statusConcept".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("reasonConcept".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConcept", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.ReasonConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("moodConcept".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConcept", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.MoodConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("classConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("stopTime".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("stopTime", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.StopTimeXml = ((string)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("startTime".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("startTime", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.StartTimeXml = ((string)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("actTime".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("actTime", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.ActTimeXml = ((string)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("template".Equals(r.Value))
                                                                                                                            {
                                                                                                                                r.Read();
                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                                                                                if ((_instance != null))
                                                                                                                                {
                                                                                                                                    _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ("isNegated".Equals(r.Value))
                                                                                                                                {
                                                                                                                                    r.Read();
                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(bool), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("isNegated", context.JsonContext, _retVal, context));
                                                                                                                                    if ((_instance != null))
                                                                                                                                    {
                                                                                                                                        _retVal.IsNegated = ((bool)(_instance));
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    if ("paymentTerms".Equals(r.Value))
                                                                                                                                    {
                                                                                                                                        r.Read();
                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("paymentTerms", context.JsonContext, _retVal, context));
                                                                                                                                        if ((_instance != null))
                                                                                                                                        {
                                                                                                                                            _retVal.PaymentTermsKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        if ("$type".Equals(r.Value))
                                                                                                                                        {
                                                                                                                                            System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                            if ((_type != typeof(SanteDB.Core.Model.Acts.FinancialContract)))
                                                                                                                                            {
                                                                                                                                                SanteDB.Core.Model.Acts.FinancialContract _nretVal = ((SanteDB.Core.Model.Acts.FinancialContract)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                _nretVal.CopyObjectData(_retVal);
                                                                                                                                                return _nretVal;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                        {
                                                                                                                                            r.Skip();
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Acts.FinancialTransaction"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class FinancialTransactionViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(FinancialTransactionViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Acts.FinancialTransaction);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.FinancialTransaction _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Acts.FinancialTransaction)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Acts.FinancialTransaction)));
            }
            if (context.ShouldSerialize("amount"))
            {
                if ((_strong.Amount == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "amount", _strong.Amount, context);
                }
            }
            if (context.ShouldSerialize("currency"))
            {
                if ((_strong.CurrencyKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "currency", _strong.CurrencyKey, context);
                }
            }
            if (context.ShouldSerialize("creditExchange"))
            {
                context.JsonContext.WritePropertyUtil(w, "creditExchange", _strong.CreditExchangeRate, context);
            }
            if (context.ShouldSerialize("debitExchange"))
            {
                context.JsonContext.WritePropertyUtil(w, "debitExchange", _strong.DebitExchangeRate, context);
            }
            if (context.ShouldSerialize("isNegated"))
            {
                context.JsonContext.WritePropertyUtil(w, "isNegated", _strong.IsNegated, context);
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("actTime"))
            {
                if ((_strong.ActTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "actTime", _strong.ActTimeXml, context);
                }
            }
            if (context.ShouldSerialize("startTime"))
            {
                if ((_strong.StartTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "startTime", _strong.StartTimeXml, context);
                }
            }
            if (context.ShouldSerialize("stopTime"))
            {
                if ((_strong.StopTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "stopTime", _strong.StopTimeXml, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("moodConcept"))
            {
                if ((_strong.MoodConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "moodConcept", _strong.MoodConceptKey, context);
                }
            }
            if (context.ShouldSerialize("reasonConcept"))
            {
                if ((_strong.ReasonConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "reasonConcept", _strong.ReasonConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("protocol"))
            {
                if (((_strong.Protocols == null)
                            || (_strong.Protocols.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "protocol", _strong.Protocols, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Acts.FinancialTransaction _retVal = new SanteDB.Core.Model.Acts.FinancialTransaction();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("participation".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("protocol".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("protocol", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.Protocols = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("tag".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("note".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("extension".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("policy".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("identifier".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("typeConcept".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("statusConcept".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("reasonConcept".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConcept", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.ReasonConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("moodConcept".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConcept", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.MoodConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("classConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("stopTime".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("stopTime", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.StopTimeXml = ((string)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("startTime".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("startTime", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.StartTimeXml = ((string)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("actTime".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("actTime", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.ActTimeXml = ((string)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("template".Equals(r.Value))
                                                                                                                            {
                                                                                                                                r.Read();
                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                                                                                if ((_instance != null))
                                                                                                                                {
                                                                                                                                    _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ("isNegated".Equals(r.Value))
                                                                                                                                {
                                                                                                                                    r.Read();
                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(bool), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("isNegated", context.JsonContext, _retVal, context));
                                                                                                                                    if ((_instance != null))
                                                                                                                                    {
                                                                                                                                        _retVal.IsNegated = ((bool)(_instance));
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    if ("debitExchange".Equals(r.Value))
                                                                                                                                    {
                                                                                                                                        r.Read();
                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(float), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("debitExchange", context.JsonContext, _retVal, context));
                                                                                                                                        if ((_instance != null))
                                                                                                                                        {
                                                                                                                                            _retVal.DebitExchangeRate = ((float)(_instance));
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        if ("creditExchange".Equals(r.Value))
                                                                                                                                        {
                                                                                                                                            r.Read();
                                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(float), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creditExchange", context.JsonContext, _retVal, context));
                                                                                                                                            if ((_instance != null))
                                                                                                                                            {
                                                                                                                                                _retVal.CreditExchangeRate = ((float)(_instance));
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                        {
                                                                                                                                            if ("currency".Equals(r.Value))
                                                                                                                                            {
                                                                                                                                                r.Read();
                                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("currency", context.JsonContext, _retVal, context));
                                                                                                                                                if ((_instance != null))
                                                                                                                                                {
                                                                                                                                                    _retVal.CurrencyKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                                if ("amount".Equals(r.Value))
                                                                                                                                                {
                                                                                                                                                    r.Read();
                                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("amount", context.JsonContext, _retVal, context));
                                                                                                                                                    if ((_instance != null))
                                                                                                                                                    {
                                                                                                                                                        _retVal.Amount = ((System.Nullable<decimal>)(_instance));
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else
                                                                                                                                                {
                                                                                                                                                    if ("$type".Equals(r.Value))
                                                                                                                                                    {
                                                                                                                                                        System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                        if ((_type != typeof(SanteDB.Core.Model.Acts.FinancialTransaction)))
                                                                                                                                                        {
                                                                                                                                                            SanteDB.Core.Model.Acts.FinancialTransaction _nretVal = ((SanteDB.Core.Model.Acts.FinancialTransaction)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                            _nretVal.CopyObjectData(_retVal);
                                                                                                                                                            return _nretVal;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else
                                                                                                                                                    {
                                                                                                                                                        r.Skip();
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Acts.InvoiceElement"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class InvoiceElementViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(InvoiceElementViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Acts.InvoiceElement);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.InvoiceElement _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Acts.InvoiceElement)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Acts.InvoiceElement)));
            }
            if (context.ShouldSerialize("modifier"))
            {
                if ((_strong.ModifierKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "modifier", _strong.ModifierKey, context);
                }
            }
            if (context.ShouldSerialize("unitQty"))
            {
                if ((_strong.UnitQuantity == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "unitQty", _strong.UnitQuantity, context);
                }
            }
            if (context.ShouldSerialize("unitPrice"))
            {
                if ((_strong.UnitPrice == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "unitPrice", _strong.UnitPrice, context);
                }
            }
            if (context.ShouldSerialize("netPrice"))
            {
                if ((_strong.NetPrice == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "netPrice", _strong.NetPrice, context);
                }
            }
            if (context.ShouldSerialize("currency"))
            {
                if ((_strong.CurrencyKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "currency", _strong.CurrencyKey, context);
                }
            }
            if (context.ShouldSerialize("factor"))
            {
                if ((_strong.Factor == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "factor", _strong.Factor, context);
                }
            }
            if (context.ShouldSerialize("isNegated"))
            {
                context.JsonContext.WritePropertyUtil(w, "isNegated", _strong.IsNegated, context);
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("actTime"))
            {
                if ((_strong.ActTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "actTime", _strong.ActTimeXml, context);
                }
            }
            if (context.ShouldSerialize("startTime"))
            {
                if ((_strong.StartTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "startTime", _strong.StartTimeXml, context);
                }
            }
            if (context.ShouldSerialize("stopTime"))
            {
                if ((_strong.StopTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "stopTime", _strong.StopTimeXml, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("moodConcept"))
            {
                if ((_strong.MoodConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "moodConcept", _strong.MoodConceptKey, context);
                }
            }
            if (context.ShouldSerialize("reasonConcept"))
            {
                if ((_strong.ReasonConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "reasonConcept", _strong.ReasonConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("protocol"))
            {
                if (((_strong.Protocols == null)
                            || (_strong.Protocols.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "protocol", _strong.Protocols, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Acts.InvoiceElement _retVal = new SanteDB.Core.Model.Acts.InvoiceElement();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("participation".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("protocol".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("protocol", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.Protocols = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("tag".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("note".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("extension".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("policy".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("identifier".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("typeConcept".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("statusConcept".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("reasonConcept".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConcept", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.ReasonConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("moodConcept".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConcept", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.MoodConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("classConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("stopTime".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("stopTime", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.StopTimeXml = ((string)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("startTime".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("startTime", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.StartTimeXml = ((string)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("actTime".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("actTime", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.ActTimeXml = ((string)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("template".Equals(r.Value))
                                                                                                                            {
                                                                                                                                r.Read();
                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                                                                                if ((_instance != null))
                                                                                                                                {
                                                                                                                                    _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ("isNegated".Equals(r.Value))
                                                                                                                                {
                                                                                                                                    r.Read();
                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(bool), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("isNegated", context.JsonContext, _retVal, context));
                                                                                                                                    if ((_instance != null))
                                                                                                                                    {
                                                                                                                                        _retVal.IsNegated = ((bool)(_instance));
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    if ("factor".Equals(r.Value))
                                                                                                                                    {
                                                                                                                                        r.Read();
                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<float>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("factor", context.JsonContext, _retVal, context));
                                                                                                                                        if ((_instance != null))
                                                                                                                                        {
                                                                                                                                            _retVal.Factor = ((System.Nullable<float>)(_instance));
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        if ("currency".Equals(r.Value))
                                                                                                                                        {
                                                                                                                                            r.Read();
                                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("currency", context.JsonContext, _retVal, context));
                                                                                                                                            if ((_instance != null))
                                                                                                                                            {
                                                                                                                                                _retVal.CurrencyKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                        {
                                                                                                                                            if ("netPrice".Equals(r.Value))
                                                                                                                                            {
                                                                                                                                                r.Read();
                                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("netPrice", context.JsonContext, _retVal, context));
                                                                                                                                                if ((_instance != null))
                                                                                                                                                {
                                                                                                                                                    _retVal.NetPrice = ((System.Nullable<decimal>)(_instance));
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                                if ("unitPrice".Equals(r.Value))
                                                                                                                                                {
                                                                                                                                                    r.Read();
                                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("unitPrice", context.JsonContext, _retVal, context));
                                                                                                                                                    if ((_instance != null))
                                                                                                                                                    {
                                                                                                                                                        _retVal.UnitPrice = ((System.Nullable<decimal>)(_instance));
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else
                                                                                                                                                {
                                                                                                                                                    if ("unitQty".Equals(r.Value))
                                                                                                                                                    {
                                                                                                                                                        r.Read();
                                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("unitQty", context.JsonContext, _retVal, context));
                                                                                                                                                        if ((_instance != null))
                                                                                                                                                        {
                                                                                                                                                            _retVal.UnitQuantity = ((System.Nullable<decimal>)(_instance));
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else
                                                                                                                                                    {
                                                                                                                                                        if ("modifier".Equals(r.Value))
                                                                                                                                                        {
                                                                                                                                                            r.Read();
                                                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("modifier", context.JsonContext, _retVal, context));
                                                                                                                                                            if ((_instance != null))
                                                                                                                                                            {
                                                                                                                                                                _retVal.ModifierKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        else
                                                                                                                                                        {
                                                                                                                                                            if ("$type".Equals(r.Value))
                                                                                                                                                            {
                                                                                                                                                                System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                                if ((_type != typeof(SanteDB.Core.Model.Acts.InvoiceElement)))
                                                                                                                                                                {
                                                                                                                                                                    SanteDB.Core.Model.Acts.InvoiceElement _nretVal = ((SanteDB.Core.Model.Acts.InvoiceElement)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                                    _nretVal.CopyObjectData(_retVal);
                                                                                                                                                                    return _nretVal;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            else
                                                                                                                                                            {
                                                                                                                                                                r.Skip();
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Acts.Narrative"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class NarrativeViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(NarrativeViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Acts.Narrative);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.Narrative _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Acts.Narrative)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Acts.Narrative)));
            }
            if (context.ShouldSerialize("versionCode"))
            {
                if ((_strong.VersionNumber == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "versionCode", _strong.VersionNumber, context);
                }
            }
            if (context.ShouldSerialize("language"))
            {
                if ((_strong.LanguageCode == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "language", _strong.LanguageCode, context);
                }
            }
            if (context.ShouldSerialize("mime"))
            {
                if ((_strong.MimeType == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "mime", _strong.MimeType, context);
                }
            }
            if (context.ShouldSerialize("title"))
            {
                if ((_strong.Title == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "title", _strong.Title, context);
                }
            }
            if (context.ShouldSerialize("text"))
            {
                if ((_strong.Text == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "text", _strong.Text, context);
                }
            }
            if (context.ShouldSerialize("isNegated"))
            {
                context.JsonContext.WritePropertyUtil(w, "isNegated", _strong.IsNegated, context);
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("actTime"))
            {
                if ((_strong.ActTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "actTime", _strong.ActTimeXml, context);
                }
            }
            if (context.ShouldSerialize("startTime"))
            {
                if ((_strong.StartTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "startTime", _strong.StartTimeXml, context);
                }
            }
            if (context.ShouldSerialize("stopTime"))
            {
                if ((_strong.StopTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "stopTime", _strong.StopTimeXml, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("moodConcept"))
            {
                if ((_strong.MoodConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "moodConcept", _strong.MoodConceptKey, context);
                }
            }
            if (context.ShouldSerialize("reasonConcept"))
            {
                if ((_strong.ReasonConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "reasonConcept", _strong.ReasonConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("protocol"))
            {
                if (((_strong.Protocols == null)
                            || (_strong.Protocols.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "protocol", _strong.Protocols, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Acts.Narrative _retVal = new SanteDB.Core.Model.Acts.Narrative();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("participation".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("protocol".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("protocol", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.Protocols = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("tag".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("note".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("extension".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("policy".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("identifier".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("typeConcept".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("statusConcept".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("reasonConcept".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConcept", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.ReasonConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("moodConcept".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConcept", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.MoodConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("classConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("stopTime".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("stopTime", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.StopTimeXml = ((string)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("startTime".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("startTime", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.StartTimeXml = ((string)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("actTime".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("actTime", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.ActTimeXml = ((string)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("template".Equals(r.Value))
                                                                                                                            {
                                                                                                                                r.Read();
                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                                                                                if ((_instance != null))
                                                                                                                                {
                                                                                                                                    _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ("isNegated".Equals(r.Value))
                                                                                                                                {
                                                                                                                                    r.Read();
                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(bool), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("isNegated", context.JsonContext, _retVal, context));
                                                                                                                                    if ((_instance != null))
                                                                                                                                    {
                                                                                                                                        _retVal.IsNegated = ((bool)(_instance));
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    if ("text".Equals(r.Value))
                                                                                                                                    {
                                                                                                                                        r.Read();
                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(byte[]), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("text", context.JsonContext, _retVal, context));
                                                                                                                                        if ((_instance != null))
                                                                                                                                        {
                                                                                                                                            _retVal.Text = ((byte[])(_instance));
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        if ("title".Equals(r.Value))
                                                                                                                                        {
                                                                                                                                            r.Read();
                                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("title", context.JsonContext, _retVal, context));
                                                                                                                                            if ((_instance != null))
                                                                                                                                            {
                                                                                                                                                _retVal.Title = ((string)(_instance));
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                        {
                                                                                                                                            if ("mime".Equals(r.Value))
                                                                                                                                            {
                                                                                                                                                r.Read();
                                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("mime", context.JsonContext, _retVal, context));
                                                                                                                                                if ((_instance != null))
                                                                                                                                                {
                                                                                                                                                    _retVal.MimeType = ((string)(_instance));
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                                if ("language".Equals(r.Value))
                                                                                                                                                {
                                                                                                                                                    r.Read();
                                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("language", context.JsonContext, _retVal, context));
                                                                                                                                                    if ((_instance != null))
                                                                                                                                                    {
                                                                                                                                                        _retVal.LanguageCode = ((string)(_instance));
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else
                                                                                                                                                {
                                                                                                                                                    if ("versionCode".Equals(r.Value))
                                                                                                                                                    {
                                                                                                                                                        r.Read();
                                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("versionCode", context.JsonContext, _retVal, context));
                                                                                                                                                        if ((_instance != null))
                                                                                                                                                        {
                                                                                                                                                            _retVal.VersionNumber = ((string)(_instance));
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else
                                                                                                                                                    {
                                                                                                                                                        if ("$type".Equals(r.Value))
                                                                                                                                                        {
                                                                                                                                                            System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                            if ((_type != typeof(SanteDB.Core.Model.Acts.Narrative)))
                                                                                                                                                            {
                                                                                                                                                                SanteDB.Core.Model.Acts.Narrative _nretVal = ((SanteDB.Core.Model.Acts.Narrative)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                                _nretVal.CopyObjectData(_retVal);
                                                                                                                                                                return _nretVal;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        else
                                                                                                                                                        {
                                                                                                                                                            r.Skip();
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Acts.Observation"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ObservationViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(ObservationViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Acts.Observation);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.Observation _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Acts.Observation)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Acts.Observation)));
            }
            if (context.ShouldSerialize("interpretationConcept"))
            {
                if ((_strong.InterpretationConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "interpretationConcept", _strong.InterpretationConceptKey, context);
                }
            }
            if (context.ShouldSerialize("valueType"))
            {
                if ((_strong.ValueType == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "valueType", _strong.ValueType, context);
                }
            }
            if (context.ShouldSerialize("isNegated"))
            {
                context.JsonContext.WritePropertyUtil(w, "isNegated", _strong.IsNegated, context);
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("actTime"))
            {
                if ((_strong.ActTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "actTime", _strong.ActTimeXml, context);
                }
            }
            if (context.ShouldSerialize("startTime"))
            {
                if ((_strong.StartTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "startTime", _strong.StartTimeXml, context);
                }
            }
            if (context.ShouldSerialize("stopTime"))
            {
                if ((_strong.StopTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "stopTime", _strong.StopTimeXml, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("moodConcept"))
            {
                if ((_strong.MoodConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "moodConcept", _strong.MoodConceptKey, context);
                }
            }
            if (context.ShouldSerialize("reasonConcept"))
            {
                if ((_strong.ReasonConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "reasonConcept", _strong.ReasonConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("protocol"))
            {
                if (((_strong.Protocols == null)
                            || (_strong.Protocols.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "protocol", _strong.Protocols, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Acts.Observation _retVal = new SanteDB.Core.Model.Acts.Observation();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("participation".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("protocol".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("protocol", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.Protocols = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("tag".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("note".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("extension".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("policy".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("identifier".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("typeConcept".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("statusConcept".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("reasonConcept".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConcept", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.ReasonConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("moodConcept".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConcept", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.MoodConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("classConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("stopTime".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("stopTime", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.StopTimeXml = ((string)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("startTime".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("startTime", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.StartTimeXml = ((string)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("actTime".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("actTime", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.ActTimeXml = ((string)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("template".Equals(r.Value))
                                                                                                                            {
                                                                                                                                r.Read();
                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                                                                                if ((_instance != null))
                                                                                                                                {
                                                                                                                                    _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ("isNegated".Equals(r.Value))
                                                                                                                                {
                                                                                                                                    r.Read();
                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(bool), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("isNegated", context.JsonContext, _retVal, context));
                                                                                                                                    if ((_instance != null))
                                                                                                                                    {
                                                                                                                                        _retVal.IsNegated = ((bool)(_instance));
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    if ("valueType".Equals(r.Value))
                                                                                                                                    {
                                                                                                                                        r.Read();
                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("valueType", context.JsonContext, _retVal, context));
                                                                                                                                        if ((_instance != null))
                                                                                                                                        {
                                                                                                                                            _retVal.ValueType = ((string)(_instance));
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        if ("interpretationConcept".Equals(r.Value))
                                                                                                                                        {
                                                                                                                                            r.Read();
                                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("interpretationConcept", context.JsonContext, _retVal, context));
                                                                                                                                            if ((_instance != null))
                                                                                                                                            {
                                                                                                                                                _retVal.InterpretationConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                        {
                                                                                                                                            if ("$type".Equals(r.Value))
                                                                                                                                            {
                                                                                                                                                System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                if ((_type != typeof(SanteDB.Core.Model.Acts.Observation)))
                                                                                                                                                {
                                                                                                                                                    SanteDB.Core.Model.Acts.Observation _nretVal = ((SanteDB.Core.Model.Acts.Observation)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                    _nretVal.CopyObjectData(_retVal);
                                                                                                                                                    return _nretVal;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                                r.Skip();
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Acts.QuantityObservation"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class QuantityObservationViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(QuantityObservationViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Acts.QuantityObservation);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.QuantityObservation _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Acts.QuantityObservation)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Acts.QuantityObservation)));
            }
            if (context.ShouldSerialize("value"))
            {
                if ((_strong.Value == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.Value, context);
                }
            }
            if (context.ShouldSerialize("valueType"))
            {
                if ((_strong.ValueType == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "valueType", _strong.ValueType, context);
                }
            }
            if (context.ShouldSerialize("unitOfMeasure"))
            {
                if ((_strong.UnitOfMeasureKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "unitOfMeasure", _strong.UnitOfMeasureKey, context);
                }
            }
            if (context.ShouldSerialize("interpretationConcept"))
            {
                if ((_strong.InterpretationConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "interpretationConcept", _strong.InterpretationConceptKey, context);
                }
            }
            if (context.ShouldSerialize("isNegated"))
            {
                context.JsonContext.WritePropertyUtil(w, "isNegated", _strong.IsNegated, context);
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("actTime"))
            {
                if ((_strong.ActTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "actTime", _strong.ActTimeXml, context);
                }
            }
            if (context.ShouldSerialize("startTime"))
            {
                if ((_strong.StartTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "startTime", _strong.StartTimeXml, context);
                }
            }
            if (context.ShouldSerialize("stopTime"))
            {
                if ((_strong.StopTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "stopTime", _strong.StopTimeXml, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("moodConcept"))
            {
                if ((_strong.MoodConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "moodConcept", _strong.MoodConceptKey, context);
                }
            }
            if (context.ShouldSerialize("reasonConcept"))
            {
                if ((_strong.ReasonConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "reasonConcept", _strong.ReasonConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("protocol"))
            {
                if (((_strong.Protocols == null)
                            || (_strong.Protocols.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "protocol", _strong.Protocols, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Acts.QuantityObservation _retVal = new SanteDB.Core.Model.Acts.QuantityObservation();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("participation".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("protocol".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("protocol", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.Protocols = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("tag".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("note".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("extension".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("policy".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("identifier".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("typeConcept".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("statusConcept".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("reasonConcept".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConcept", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.ReasonConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("moodConcept".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConcept", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.MoodConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("classConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("stopTime".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("stopTime", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.StopTimeXml = ((string)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("startTime".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("startTime", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.StartTimeXml = ((string)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("actTime".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("actTime", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.ActTimeXml = ((string)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("template".Equals(r.Value))
                                                                                                                            {
                                                                                                                                r.Read();
                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                                                                                if ((_instance != null))
                                                                                                                                {
                                                                                                                                    _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ("isNegated".Equals(r.Value))
                                                                                                                                {
                                                                                                                                    r.Read();
                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(bool), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("isNegated", context.JsonContext, _retVal, context));
                                                                                                                                    if ((_instance != null))
                                                                                                                                    {
                                                                                                                                        _retVal.IsNegated = ((bool)(_instance));
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    if ("interpretationConcept".Equals(r.Value))
                                                                                                                                    {
                                                                                                                                        r.Read();
                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("interpretationConcept", context.JsonContext, _retVal, context));
                                                                                                                                        if ((_instance != null))
                                                                                                                                        {
                                                                                                                                            _retVal.InterpretationConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        if ("unitOfMeasure".Equals(r.Value))
                                                                                                                                        {
                                                                                                                                            r.Read();
                                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("unitOfMeasure", context.JsonContext, _retVal, context));
                                                                                                                                            if ((_instance != null))
                                                                                                                                            {
                                                                                                                                                _retVal.UnitOfMeasureKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                        {
                                                                                                                                            if ("valueType".Equals(r.Value))
                                                                                                                                            {
                                                                                                                                                r.Read();
                                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("valueType", context.JsonContext, _retVal, context));
                                                                                                                                                if ((_instance != null))
                                                                                                                                                {
                                                                                                                                                    _retVal.ValueType = ((string)(_instance));
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                                if ("value".Equals(r.Value))
                                                                                                                                                {
                                                                                                                                                    r.Read();
                                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context));
                                                                                                                                                    if ((_instance != null))
                                                                                                                                                    {
                                                                                                                                                        _retVal.Value = ((System.Nullable<decimal>)(_instance));
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else
                                                                                                                                                {
                                                                                                                                                    if ("$type".Equals(r.Value))
                                                                                                                                                    {
                                                                                                                                                        System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                        if ((_type != typeof(SanteDB.Core.Model.Acts.QuantityObservation)))
                                                                                                                                                        {
                                                                                                                                                            SanteDB.Core.Model.Acts.QuantityObservation _nretVal = ((SanteDB.Core.Model.Acts.QuantityObservation)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                            _nretVal.CopyObjectData(_retVal);
                                                                                                                                                            return _nretVal;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else
                                                                                                                                                    {
                                                                                                                                                        r.Skip();
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Acts.TextObservation"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class TextObservationViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(TextObservationViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Acts.TextObservation);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.TextObservation _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Acts.TextObservation)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Acts.TextObservation)));
            }
            if (context.ShouldSerialize("valueType"))
            {
                if ((_strong.ValueType == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "valueType", _strong.ValueType, context);
                }
            }
            if (context.ShouldSerialize("value"))
            {
                if ((_strong.Value == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.Value, context);
                }
            }
            if (context.ShouldSerialize("interpretationConcept"))
            {
                if ((_strong.InterpretationConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "interpretationConcept", _strong.InterpretationConceptKey, context);
                }
            }
            if (context.ShouldSerialize("isNegated"))
            {
                context.JsonContext.WritePropertyUtil(w, "isNegated", _strong.IsNegated, context);
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("actTime"))
            {
                if ((_strong.ActTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "actTime", _strong.ActTimeXml, context);
                }
            }
            if (context.ShouldSerialize("startTime"))
            {
                if ((_strong.StartTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "startTime", _strong.StartTimeXml, context);
                }
            }
            if (context.ShouldSerialize("stopTime"))
            {
                if ((_strong.StopTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "stopTime", _strong.StopTimeXml, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("moodConcept"))
            {
                if ((_strong.MoodConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "moodConcept", _strong.MoodConceptKey, context);
                }
            }
            if (context.ShouldSerialize("reasonConcept"))
            {
                if ((_strong.ReasonConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "reasonConcept", _strong.ReasonConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("protocol"))
            {
                if (((_strong.Protocols == null)
                            || (_strong.Protocols.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "protocol", _strong.Protocols, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Acts.TextObservation _retVal = new SanteDB.Core.Model.Acts.TextObservation();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("participation".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("protocol".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("protocol", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.Protocols = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("tag".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("note".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("extension".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("policy".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("identifier".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("typeConcept".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("statusConcept".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("reasonConcept".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConcept", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.ReasonConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("moodConcept".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConcept", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.MoodConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("classConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("stopTime".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("stopTime", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.StopTimeXml = ((string)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("startTime".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("startTime", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.StartTimeXml = ((string)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("actTime".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("actTime", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.ActTimeXml = ((string)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("template".Equals(r.Value))
                                                                                                                            {
                                                                                                                                r.Read();
                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                                                                                if ((_instance != null))
                                                                                                                                {
                                                                                                                                    _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ("isNegated".Equals(r.Value))
                                                                                                                                {
                                                                                                                                    r.Read();
                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(bool), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("isNegated", context.JsonContext, _retVal, context));
                                                                                                                                    if ((_instance != null))
                                                                                                                                    {
                                                                                                                                        _retVal.IsNegated = ((bool)(_instance));
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    if ("interpretationConcept".Equals(r.Value))
                                                                                                                                    {
                                                                                                                                        r.Read();
                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("interpretationConcept", context.JsonContext, _retVal, context));
                                                                                                                                        if ((_instance != null))
                                                                                                                                        {
                                                                                                                                            _retVal.InterpretationConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        if ("value".Equals(r.Value))
                                                                                                                                        {
                                                                                                                                            r.Read();
                                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context));
                                                                                                                                            if ((_instance != null))
                                                                                                                                            {
                                                                                                                                                _retVal.Value = ((string)(_instance));
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                        {
                                                                                                                                            if ("valueType".Equals(r.Value))
                                                                                                                                            {
                                                                                                                                                r.Read();
                                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("valueType", context.JsonContext, _retVal, context));
                                                                                                                                                if ((_instance != null))
                                                                                                                                                {
                                                                                                                                                    _retVal.ValueType = ((string)(_instance));
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                                if ("$type".Equals(r.Value))
                                                                                                                                                {
                                                                                                                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                    if ((_type != typeof(SanteDB.Core.Model.Acts.TextObservation)))
                                                                                                                                                    {
                                                                                                                                                        SanteDB.Core.Model.Acts.TextObservation _nretVal = ((SanteDB.Core.Model.Acts.TextObservation)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                        _nretVal.CopyObjectData(_retVal);
                                                                                                                                                        return _nretVal;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else
                                                                                                                                                {
                                                                                                                                                    r.Skip();
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Acts.CodedObservation"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class CodedObservationViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(CodedObservationViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Acts.CodedObservation);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.CodedObservation _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Acts.CodedObservation)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Acts.CodedObservation)));
            }
            if (context.ShouldSerialize("valueType"))
            {
                if ((_strong.ValueType == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "valueType", _strong.ValueType, context);
                }
            }
            if (context.ShouldSerialize("value"))
            {
                if ((_strong.ValueKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.ValueKey, context);
                }
            }
            if (context.ShouldSerialize("interpretationConcept"))
            {
                if ((_strong.InterpretationConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "interpretationConcept", _strong.InterpretationConceptKey, context);
                }
            }
            if (context.ShouldSerialize("isNegated"))
            {
                context.JsonContext.WritePropertyUtil(w, "isNegated", _strong.IsNegated, context);
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("actTime"))
            {
                if ((_strong.ActTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "actTime", _strong.ActTimeXml, context);
                }
            }
            if (context.ShouldSerialize("startTime"))
            {
                if ((_strong.StartTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "startTime", _strong.StartTimeXml, context);
                }
            }
            if (context.ShouldSerialize("stopTime"))
            {
                if ((_strong.StopTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "stopTime", _strong.StopTimeXml, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("moodConcept"))
            {
                if ((_strong.MoodConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "moodConcept", _strong.MoodConceptKey, context);
                }
            }
            if (context.ShouldSerialize("reasonConcept"))
            {
                if ((_strong.ReasonConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "reasonConcept", _strong.ReasonConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("protocol"))
            {
                if (((_strong.Protocols == null)
                            || (_strong.Protocols.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "protocol", _strong.Protocols, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Acts.CodedObservation _retVal = new SanteDB.Core.Model.Acts.CodedObservation();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("participation".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("protocol".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("protocol", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.Protocols = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("tag".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("note".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("extension".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("policy".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("identifier".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("typeConcept".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("statusConcept".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("reasonConcept".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConcept", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.ReasonConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("moodConcept".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConcept", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.MoodConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("classConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("stopTime".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("stopTime", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.StopTimeXml = ((string)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("startTime".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("startTime", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.StartTimeXml = ((string)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("actTime".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("actTime", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.ActTimeXml = ((string)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("template".Equals(r.Value))
                                                                                                                            {
                                                                                                                                r.Read();
                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                                                                                if ((_instance != null))
                                                                                                                                {
                                                                                                                                    _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ("isNegated".Equals(r.Value))
                                                                                                                                {
                                                                                                                                    r.Read();
                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(bool), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("isNegated", context.JsonContext, _retVal, context));
                                                                                                                                    if ((_instance != null))
                                                                                                                                    {
                                                                                                                                        _retVal.IsNegated = ((bool)(_instance));
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    if ("interpretationConcept".Equals(r.Value))
                                                                                                                                    {
                                                                                                                                        r.Read();
                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("interpretationConcept", context.JsonContext, _retVal, context));
                                                                                                                                        if ((_instance != null))
                                                                                                                                        {
                                                                                                                                            _retVal.InterpretationConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        if ("value".Equals(r.Value))
                                                                                                                                        {
                                                                                                                                            r.Read();
                                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context));
                                                                                                                                            if ((_instance != null))
                                                                                                                                            {
                                                                                                                                                _retVal.ValueKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                        {
                                                                                                                                            if ("valueType".Equals(r.Value))
                                                                                                                                            {
                                                                                                                                                r.Read();
                                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("valueType", context.JsonContext, _retVal, context));
                                                                                                                                                if ((_instance != null))
                                                                                                                                                {
                                                                                                                                                    _retVal.ValueType = ((string)(_instance));
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                                if ("$type".Equals(r.Value))
                                                                                                                                                {
                                                                                                                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                    if ((_type != typeof(SanteDB.Core.Model.Acts.CodedObservation)))
                                                                                                                                                    {
                                                                                                                                                        SanteDB.Core.Model.Acts.CodedObservation _nretVal = ((SanteDB.Core.Model.Acts.CodedObservation)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                        _nretVal.CopyObjectData(_retVal);
                                                                                                                                                        return _nretVal;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else
                                                                                                                                                {
                                                                                                                                                    r.Skip();
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Acts.PatientEncounter"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class PatientEncounterViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(PatientEncounterViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Acts.PatientEncounter);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.PatientEncounter _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Acts.PatientEncounter)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Acts.PatientEncounter)));
            }
            if (context.ShouldSerialize("dischargeDisposition"))
            {
                if ((_strong.DischargeDispositionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "dischargeDisposition", _strong.DischargeDispositionKey, context);
                }
            }
            if (context.ShouldSerialize("admissionSource"))
            {
                if ((_strong.AdmissionSourceTypeKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "admissionSource", _strong.AdmissionSourceTypeKey, context);
                }
            }
            if (context.ShouldSerialize("specialArrangement"))
            {
                if (((_strong.SpecialArrangements == null)
                            || (_strong.SpecialArrangements.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "specialArrangement", _strong.SpecialArrangements, context);
                }
            }
            if (context.ShouldSerialize("isNegated"))
            {
                context.JsonContext.WritePropertyUtil(w, "isNegated", _strong.IsNegated, context);
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("actTime"))
            {
                if ((_strong.ActTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "actTime", _strong.ActTimeXml, context);
                }
            }
            if (context.ShouldSerialize("startTime"))
            {
                if ((_strong.StartTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "startTime", _strong.StartTimeXml, context);
                }
            }
            if (context.ShouldSerialize("stopTime"))
            {
                if ((_strong.StopTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "stopTime", _strong.StopTimeXml, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("moodConcept"))
            {
                if ((_strong.MoodConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "moodConcept", _strong.MoodConceptKey, context);
                }
            }
            if (context.ShouldSerialize("reasonConcept"))
            {
                if ((_strong.ReasonConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "reasonConcept", _strong.ReasonConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("protocol"))
            {
                if (((_strong.Protocols == null)
                            || (_strong.Protocols.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "protocol", _strong.Protocols, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Acts.PatientEncounter _retVal = new SanteDB.Core.Model.Acts.PatientEncounter();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("participation".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("protocol".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("protocol", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.Protocols = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("tag".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("note".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("extension".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("policy".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("identifier".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("typeConcept".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("statusConcept".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("reasonConcept".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConcept", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.ReasonConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("moodConcept".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConcept", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.MoodConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("classConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("stopTime".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("stopTime", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.StopTimeXml = ((string)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("startTime".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("startTime", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.StartTimeXml = ((string)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("actTime".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("actTime", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.ActTimeXml = ((string)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("template".Equals(r.Value))
                                                                                                                            {
                                                                                                                                r.Read();
                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                                                                                if ((_instance != null))
                                                                                                                                {
                                                                                                                                    _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ("isNegated".Equals(r.Value))
                                                                                                                                {
                                                                                                                                    r.Read();
                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(bool), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("isNegated", context.JsonContext, _retVal, context));
                                                                                                                                    if ((_instance != null))
                                                                                                                                    {
                                                                                                                                        _retVal.IsNegated = ((bool)(_instance));
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    if ("specialArrangement".Equals(r.Value))
                                                                                                                                    {
                                                                                                                                        r.Read();
                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.PatientEncounterArrangement>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("specialArrangement", context.JsonContext, _retVal, context));
                                                                                                                                        if ((_instance != null))
                                                                                                                                        {
                                                                                                                                            _retVal.SpecialArrangements = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.PatientEncounterArrangement>)(_instance));
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        if ("admissionSource".Equals(r.Value))
                                                                                                                                        {
                                                                                                                                            r.Read();
                                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("admissionSource", context.JsonContext, _retVal, context));
                                                                                                                                            if ((_instance != null))
                                                                                                                                            {
                                                                                                                                                _retVal.AdmissionSourceTypeKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                        {
                                                                                                                                            if ("dischargeDisposition".Equals(r.Value))
                                                                                                                                            {
                                                                                                                                                r.Read();
                                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("dischargeDisposition", context.JsonContext, _retVal, context));
                                                                                                                                                if ((_instance != null))
                                                                                                                                                {
                                                                                                                                                    _retVal.DischargeDispositionKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                                if ("$type".Equals(r.Value))
                                                                                                                                                {
                                                                                                                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                    if ((_type != typeof(SanteDB.Core.Model.Acts.PatientEncounter)))
                                                                                                                                                    {
                                                                                                                                                        SanteDB.Core.Model.Acts.PatientEncounter _nretVal = ((SanteDB.Core.Model.Acts.PatientEncounter)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                        _nretVal.CopyObjectData(_retVal);
                                                                                                                                                        return _nretVal;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else
                                                                                                                                                {
                                                                                                                                                    r.Skip();
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Acts.PatientEncounterArrangement"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class PatientEncounterArrangementViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(PatientEncounterArrangementViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Acts.PatientEncounterArrangement);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.PatientEncounterArrangement _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Acts.PatientEncounterArrangement)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Acts.PatientEncounterArrangement)));
            }
            if (context.ShouldSerialize("type"))
            {
                context.JsonContext.WritePropertyUtil(w, "type", _strong.ArrangementTypeKey, context);
            }
            if (context.ShouldSerialize("startTime"))
            {
                if ((_strong.StartTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "startTime", _strong.StartTimeXml, context);
                }
            }
            if (context.ShouldSerialize("stopTime"))
            {
                if ((_strong.StopTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "stopTime", _strong.StopTimeXml, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence"))
            {
                if ((_strong.EffectiveVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence"))
            {
                if ((_strong.ObsoleteVersionSequenceId == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn"))
            {
                context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
            }
            if (context.ShouldSerialize("source"))
            {
                if ((_strong.SourceEntityKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Acts.PatientEncounterArrangement _retVal = new SanteDB.Core.Model.Acts.PatientEncounterArrangement();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("source".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.SourceEntityKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("obsoleteVersionSequence".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.ObsoleteVersionSequenceId = ((System.Nullable<long>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("effectiveVersionSequence".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.EffectiveVersionSequenceId = ((System.Nullable<long>)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("stopTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("stopTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.StopTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("startTime".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("startTime", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.StartTimeXml = ((string)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("type".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Guid), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("type", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.ArrangementTypeKey = ((System.Guid)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("$type".Equals(r.Value))
                                                    {
                                                        System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                        if ((_type != typeof(SanteDB.Core.Model.Acts.PatientEncounterArrangement)))
                                                        {
                                                            SanteDB.Core.Model.Acts.PatientEncounterArrangement _nretVal = ((SanteDB.Core.Model.Acts.PatientEncounterArrangement)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                            _nretVal.CopyObjectData(_retVal);
                                                            return _nretVal;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        r.Skip();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Acts.Procedure"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ProcedureViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(ProcedureViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Acts.Procedure);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.Procedure _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Acts.Procedure)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Acts.Procedure)));
            }
            if (context.ShouldSerialize("method"))
            {
                if ((_strong.MethodKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "method", _strong.MethodKey, context);
                }
            }
            if (context.ShouldSerialize("approachSite"))
            {
                if ((_strong.ApproachSiteKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "approachSite", _strong.ApproachSiteKey, context);
                }
            }
            if (context.ShouldSerialize("targetSite"))
            {
                if ((_strong.TargetSiteKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "targetSite", _strong.TargetSiteKey, context);
                }
            }
            if (context.ShouldSerialize("isNegated"))
            {
                context.JsonContext.WritePropertyUtil(w, "isNegated", _strong.IsNegated, context);
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("actTime"))
            {
                if ((_strong.ActTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "actTime", _strong.ActTimeXml, context);
                }
            }
            if (context.ShouldSerialize("startTime"))
            {
                if ((_strong.StartTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "startTime", _strong.StartTimeXml, context);
                }
            }
            if (context.ShouldSerialize("stopTime"))
            {
                if ((_strong.StopTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "stopTime", _strong.StopTimeXml, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("moodConcept"))
            {
                if ((_strong.MoodConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "moodConcept", _strong.MoodConceptKey, context);
                }
            }
            if (context.ShouldSerialize("reasonConcept"))
            {
                if ((_strong.ReasonConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "reasonConcept", _strong.ReasonConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("protocol"))
            {
                if (((_strong.Protocols == null)
                            || (_strong.Protocols.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "protocol", _strong.Protocols, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Acts.Procedure _retVal = new SanteDB.Core.Model.Acts.Procedure();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("participation".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("protocol".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("protocol", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.Protocols = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("tag".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("note".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("extension".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("policy".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("identifier".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("typeConcept".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("statusConcept".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("reasonConcept".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConcept", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.ReasonConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("moodConcept".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConcept", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.MoodConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("classConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("stopTime".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("stopTime", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.StopTimeXml = ((string)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("startTime".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("startTime", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.StartTimeXml = ((string)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("actTime".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("actTime", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.ActTimeXml = ((string)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("template".Equals(r.Value))
                                                                                                                            {
                                                                                                                                r.Read();
                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                                                                                if ((_instance != null))
                                                                                                                                {
                                                                                                                                    _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ("isNegated".Equals(r.Value))
                                                                                                                                {
                                                                                                                                    r.Read();
                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(bool), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("isNegated", context.JsonContext, _retVal, context));
                                                                                                                                    if ((_instance != null))
                                                                                                                                    {
                                                                                                                                        _retVal.IsNegated = ((bool)(_instance));
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    if ("targetSite".Equals(r.Value))
                                                                                                                                    {
                                                                                                                                        r.Read();
                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("targetSite", context.JsonContext, _retVal, context));
                                                                                                                                        if ((_instance != null))
                                                                                                                                        {
                                                                                                                                            _retVal.TargetSiteKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        if ("approachSite".Equals(r.Value))
                                                                                                                                        {
                                                                                                                                            r.Read();
                                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("approachSite", context.JsonContext, _retVal, context));
                                                                                                                                            if ((_instance != null))
                                                                                                                                            {
                                                                                                                                                _retVal.ApproachSiteKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                        {
                                                                                                                                            if ("method".Equals(r.Value))
                                                                                                                                            {
                                                                                                                                                r.Read();
                                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("method", context.JsonContext, _retVal, context));
                                                                                                                                                if ((_instance != null))
                                                                                                                                                {
                                                                                                                                                    _retVal.MethodKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                                if ("$type".Equals(r.Value))
                                                                                                                                                {
                                                                                                                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                    if ((_type != typeof(SanteDB.Core.Model.Acts.Procedure)))
                                                                                                                                                    {
                                                                                                                                                        SanteDB.Core.Model.Acts.Procedure _nretVal = ((SanteDB.Core.Model.Acts.Procedure)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                        _nretVal.CopyObjectData(_retVal);
                                                                                                                                                        return _nretVal;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else
                                                                                                                                                {
                                                                                                                                                    r.Skip();
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Acts.Protocol"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ProtocolViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(ProtocolViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Acts.Protocol);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.Protocol _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Acts.Protocol)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Acts.Protocol)));
            }
            if (context.ShouldSerialize("name"))
            {
                if ((_strong.Name == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("handlerClass"))
            {
                if ((_strong.HandlerClassName == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "handlerClass", _strong.HandlerClassName, context);
                }
            }
            if (context.ShouldSerialize("definition"))
            {
                if ((_strong.Definition == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "definition", _strong.Definition, context);
                }
            }
            if (context.ShouldSerialize("oid"))
            {
                if ((_strong.Oid == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "oid", _strong.Oid, context);
                }
            }
            if (context.ShouldSerialize("narrative"))
            {
                if ((_strong.NarrativeKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "narrative", _strong.NarrativeKey, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Acts.Protocol _retVal = new SanteDB.Core.Model.Acts.Protocol();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("narrative".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("narrative", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.NarrativeKey = ((System.Nullable<System.Guid>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("oid".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("oid", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.Oid = ((string)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("definition".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(byte[]), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("definition", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.Definition = ((byte[])(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("handlerClass".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("handlerClass", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.HandlerClassName = ((string)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("name".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Name = ((string)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("$type".Equals(r.Value))
                                                                {
                                                                    System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                    if ((_type != typeof(SanteDB.Core.Model.Acts.Protocol)))
                                                                    {
                                                                        SanteDB.Core.Model.Acts.Protocol _nretVal = ((SanteDB.Core.Model.Acts.Protocol)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                        _nretVal.CopyObjectData(_retVal);
                                                                        return _nretVal;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    r.Skip();
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }

    /// <summary>Serializes <see cref="SanteDB.Core.Model.Acts.SubstanceAdministration"/> to or from JSON View Model Format</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class SubstanceAdministrationViewModelSerializer : SanteDB.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter
    {

        /// <inheritdoc/>
        private SanteDB.Core.Model.Serialization.ModelSerializationBinder m_binder = new SanteDB.Core.Model.Serialization.ModelSerializationBinder();

        /// <inheritdoc/>
        private SanteDB.Core.Diagnostics.Tracer m_tracer = SanteDB.Core.Diagnostics.Tracer.GetTracer(typeof(SubstanceAdministrationViewModelSerializer));

        /// <inheritdoc/>
        public System.Type HandlesType
        {
            get
            {
                return typeof(SanteDB.Core.Model.Acts.SubstanceAdministration);
            }
        }

        /// <inheritdoc/>
        public void Serialize(Newtonsoft.Json.JsonWriter w, SanteDB.Core.Model.IdentifiedData o, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            if ((o == null))
            {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.SubstanceAdministration _strong = null;
            try
            {
                _strong = ((SanteDB.Core.Model.Acts.SubstanceAdministration)(o));
            }
            catch (System.Exception e)
            {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(SanteDB.Core.Model.Acts.SubstanceAdministration)));
            }
            if (context.ShouldSerialize("route"))
            {
                if ((_strong.RouteKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "route", _strong.RouteKey, context);
                }
            }
            if (context.ShouldSerialize("doseUnit"))
            {
                if ((_strong.DoseUnitKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "doseUnit", _strong.DoseUnitKey, context);
                }
            }
            if (context.ShouldSerialize("doseQuantity"))
            {
                context.JsonContext.WritePropertyUtil(w, "doseQuantity", _strong.DoseQuantity, context);
            }
            if (context.ShouldSerialize("doseSequence"))
            {
                context.JsonContext.WritePropertyUtil(w, "doseSequence", _strong.SequenceId, context);
            }
            if (context.ShouldSerialize("site"))
            {
                if ((_strong.SiteKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "site", _strong.SiteKey, context);
                }
            }
            if (context.ShouldSerialize("isNegated"))
            {
                context.JsonContext.WritePropertyUtil(w, "isNegated", _strong.IsNegated, context);
            }
            if (context.ShouldSerialize("template"))
            {
                if ((_strong.TemplateKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.TemplateKey, context);
                }
            }
            if (context.ShouldSerialize("actTime"))
            {
                if ((_strong.ActTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "actTime", _strong.ActTimeXml, context);
                }
            }
            if (context.ShouldSerialize("startTime"))
            {
                if ((_strong.StartTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "startTime", _strong.StartTimeXml, context);
                }
            }
            if (context.ShouldSerialize("stopTime"))
            {
                if ((_strong.StopTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "stopTime", _strong.StopTimeXml, context);
                }
            }
            if (context.ShouldSerialize("classConcept"))
            {
                if ((_strong.ClassConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("moodConcept"))
            {
                if ((_strong.MoodConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "moodConcept", _strong.MoodConceptKey, context);
                }
            }
            if (context.ShouldSerialize("reasonConcept"))
            {
                if ((_strong.ReasonConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "reasonConcept", _strong.ReasonConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept"))
            {
                if ((_strong.StatusConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept"))
            {
                if ((_strong.TypeConceptKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("identifier"))
            {
                if (((_strong.Identifiers == null)
                            || (_strong.Identifiers.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship"))
            {
                if (((_strong.Relationships == null)
                            || (_strong.Relationships.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("policy"))
            {
                if (((_strong.Policies == null)
                            || (_strong.Policies.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("extension"))
            {
                if (((_strong.Extensions == null)
                            || (_strong.Extensions.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("note"))
            {
                if (((_strong.Notes == null)
                            || (_strong.Notes.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag"))
            {
                if (((_strong.Tags == null)
                            || (_strong.Tags.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("protocol"))
            {
                if (((_strong.Protocols == null)
                            || (_strong.Protocols.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "protocol", _strong.Protocols, context);
                }
            }
            if (context.ShouldSerialize("participation"))
            {
                if (((_strong.Participations == null)
                            || (_strong.Participations.Count == 0)))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("geo"))
            {
                if ((_strong.GeoTag == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "geo", _strong.GeoTag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion"))
            {
                if ((_strong.PreviousVersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version"))
            {
                if ((_strong.VersionKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence"))
            {
                if ((_strong.VersionSequence == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTime"))
            {
                if ((_strong.CreationTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime"))
            {
                if ((_strong.ObsoletionTimeXml == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy"))
            {
                if ((_strong.CreatedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy"))
            {
                if ((_strong.ObsoletedByKey == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id"))
            {
                if ((_strong.Key == null))
                {
                }
                else
                {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("operation"))
            {
                context.JsonContext.WritePropertyUtil(w, "operation", _strong.BatchOperation, context);
            }
        }

        /// <inheritdoc/>
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext context)
        {
            SanteDB.Core.Model.Acts.SubstanceAdministration _retVal = new SanteDB.Core.Model.Acts.SubstanceAdministration();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject))
            {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read();
            )
            {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName))
                {
                    if ("operation".Equals(r.Value))
                    {
                        r.Read();
                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.BatchOperationType), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("operation", context.JsonContext, _retVal, context));
                        if ((_instance != null))
                        {
                            _retVal.BatchOperation = ((SanteDB.Core.Model.DataTypes.BatchOperationType)(_instance));
                        }
                    }
                    else
                    {
                        if ("id".Equals(r.Value))
                        {
                            r.Read();
                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context));
                            if ((_instance != null))
                            {
                                _retVal.Key = ((System.Nullable<System.Guid>)(_instance));
                            }
                        }
                        else
                        {
                            if ("obsoletedBy".Equals(r.Value))
                            {
                                r.Read();
                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context));
                                if ((_instance != null))
                                {
                                    _retVal.ObsoletedByKey = ((System.Nullable<System.Guid>)(_instance));
                                }
                            }
                            else
                            {
                                if ("createdBy".Equals(r.Value))
                                {
                                    r.Read();
                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context));
                                    if ((_instance != null))
                                    {
                                        _retVal.CreatedByKey = ((System.Nullable<System.Guid>)(_instance));
                                    }
                                }
                                else
                                {
                                    if ("obsoletionTime".Equals(r.Value))
                                    {
                                        r.Read();
                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context));
                                        if ((_instance != null))
                                        {
                                            _retVal.ObsoletionTimeXml = ((string)(_instance));
                                        }
                                    }
                                    else
                                    {
                                        if ("creationTime".Equals(r.Value))
                                        {
                                            r.Read();
                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context));
                                            if ((_instance != null))
                                            {
                                                _retVal.CreationTimeXml = ((string)(_instance));
                                            }
                                        }
                                        else
                                        {
                                            if ("sequence".Equals(r.Value))
                                            {
                                                r.Read();
                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<long>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context));
                                                if ((_instance != null))
                                                {
                                                    _retVal.VersionSequence = ((System.Nullable<long>)(_instance));
                                                }
                                            }
                                            else
                                            {
                                                if ("version".Equals(r.Value))
                                                {
                                                    r.Read();
                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context));
                                                    if ((_instance != null))
                                                    {
                                                        _retVal.VersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                    }
                                                }
                                                else
                                                {
                                                    if ("previousVersion".Equals(r.Value))
                                                    {
                                                        r.Read();
                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context));
                                                        if ((_instance != null))
                                                        {
                                                            _retVal.PreviousVersionKey = ((System.Nullable<System.Guid>)(_instance));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ("geo".Equals(r.Value))
                                                        {
                                                            r.Read();
                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(SanteDB.Core.Model.DataTypes.GeoTag), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("geo", context.JsonContext, _retVal, context));
                                                            if ((_instance != null))
                                                            {
                                                                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(_instance));
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ("participation".Equals(r.Value))
                                                            {
                                                                r.Read();
                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context));
                                                                if ((_instance != null))
                                                                {
                                                                    _retVal.Participations = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>)(_instance));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ("protocol".Equals(r.Value))
                                                                {
                                                                    r.Read();
                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("protocol", context.JsonContext, _retVal, context));
                                                                    if ((_instance != null))
                                                                    {
                                                                        _retVal.Protocols = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>)(_instance));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if ("tag".Equals(r.Value))
                                                                    {
                                                                        r.Read();
                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context));
                                                                        if ((_instance != null))
                                                                        {
                                                                            _retVal.Tags = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>)(_instance));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if ("note".Equals(r.Value))
                                                                        {
                                                                            r.Read();
                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context));
                                                                            if ((_instance != null))
                                                                            {
                                                                                _retVal.Notes = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>)(_instance));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if ("extension".Equals(r.Value))
                                                                            {
                                                                                r.Read();
                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context));
                                                                                if ((_instance != null))
                                                                                {
                                                                                    _retVal.Extensions = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>)(_instance));
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if ("policy".Equals(r.Value))
                                                                                {
                                                                                    r.Read();
                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context));
                                                                                    if ((_instance != null))
                                                                                    {
                                                                                        _retVal.Policies = ((System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>)(_instance));
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ("relationship".Equals(r.Value))
                                                                                    {
                                                                                        r.Read();
                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context));
                                                                                        if ((_instance != null))
                                                                                        {
                                                                                            _retVal.Relationships = ((System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>)(_instance));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ("identifier".Equals(r.Value))
                                                                                        {
                                                                                            r.Read();
                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context));
                                                                                            if ((_instance != null))
                                                                                            {
                                                                                                _retVal.Identifiers = ((System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>)(_instance));
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ("typeConcept".Equals(r.Value))
                                                                                            {
                                                                                                r.Read();
                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context));
                                                                                                if ((_instance != null))
                                                                                                {
                                                                                                    _retVal.TypeConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ("statusConcept".Equals(r.Value))
                                                                                                {
                                                                                                    r.Read();
                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context));
                                                                                                    if ((_instance != null))
                                                                                                    {
                                                                                                        _retVal.StatusConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ("reasonConcept".Equals(r.Value))
                                                                                                    {
                                                                                                        r.Read();
                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConcept", context.JsonContext, _retVal, context));
                                                                                                        if ((_instance != null))
                                                                                                        {
                                                                                                            _retVal.ReasonConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ("moodConcept".Equals(r.Value))
                                                                                                        {
                                                                                                            r.Read();
                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConcept", context.JsonContext, _retVal, context));
                                                                                                            if ((_instance != null))
                                                                                                            {
                                                                                                                _retVal.MoodConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ("classConcept".Equals(r.Value))
                                                                                                            {
                                                                                                                r.Read();
                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context));
                                                                                                                if ((_instance != null))
                                                                                                                {
                                                                                                                    _retVal.ClassConceptKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ("stopTime".Equals(r.Value))
                                                                                                                {
                                                                                                                    r.Read();
                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("stopTime", context.JsonContext, _retVal, context));
                                                                                                                    if ((_instance != null))
                                                                                                                    {
                                                                                                                        _retVal.StopTimeXml = ((string)(_instance));
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ("startTime".Equals(r.Value))
                                                                                                                    {
                                                                                                                        r.Read();
                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("startTime", context.JsonContext, _retVal, context));
                                                                                                                        if ((_instance != null))
                                                                                                                        {
                                                                                                                            _retVal.StartTimeXml = ((string)(_instance));
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ("actTime".Equals(r.Value))
                                                                                                                        {
                                                                                                                            r.Read();
                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(string), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("actTime", context.JsonContext, _retVal, context));
                                                                                                                            if ((_instance != null))
                                                                                                                            {
                                                                                                                                _retVal.ActTimeXml = ((string)(_instance));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ("template".Equals(r.Value))
                                                                                                                            {
                                                                                                                                r.Read();
                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context));
                                                                                                                                if ((_instance != null))
                                                                                                                                {
                                                                                                                                    _retVal.TemplateKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ("isNegated".Equals(r.Value))
                                                                                                                                {
                                                                                                                                    r.Read();
                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(bool), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("isNegated", context.JsonContext, _retVal, context));
                                                                                                                                    if ((_instance != null))
                                                                                                                                    {
                                                                                                                                        _retVal.IsNegated = ((bool)(_instance));
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    if ("site".Equals(r.Value))
                                                                                                                                    {
                                                                                                                                        r.Read();
                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("site", context.JsonContext, _retVal, context));
                                                                                                                                        if ((_instance != null))
                                                                                                                                        {
                                                                                                                                            _retVal.SiteKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        if ("doseSequence".Equals(r.Value))
                                                                                                                                        {
                                                                                                                                            r.Read();
                                                                                                                                            object _instance = context.JsonContext.ReadElementUtil(r, typeof(int), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("doseSequence", context.JsonContext, _retVal, context));
                                                                                                                                            if ((_instance != null))
                                                                                                                                            {
                                                                                                                                                _retVal.SequenceId = ((int)(_instance));
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                        {
                                                                                                                                            if ("doseQuantity".Equals(r.Value))
                                                                                                                                            {
                                                                                                                                                r.Read();
                                                                                                                                                object _instance = context.JsonContext.ReadElementUtil(r, typeof(decimal), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("doseQuantity", context.JsonContext, _retVal, context));
                                                                                                                                                if ((_instance != null))
                                                                                                                                                {
                                                                                                                                                    _retVal.DoseQuantity = ((decimal)(_instance));
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                                if ("doseUnit".Equals(r.Value))
                                                                                                                                                {
                                                                                                                                                    r.Read();
                                                                                                                                                    object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("doseUnit", context.JsonContext, _retVal, context));
                                                                                                                                                    if ((_instance != null))
                                                                                                                                                    {
                                                                                                                                                        _retVal.DoseUnitKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else
                                                                                                                                                {
                                                                                                                                                    if ("route".Equals(r.Value))
                                                                                                                                                    {
                                                                                                                                                        r.Read();
                                                                                                                                                        object _instance = context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new SanteDB.Core.Applets.ViewModel.Json.JsonSerializationContext("route", context.JsonContext, _retVal, context));
                                                                                                                                                        if ((_instance != null))
                                                                                                                                                        {
                                                                                                                                                            _retVal.RouteKey = ((System.Nullable<System.Guid>)(_instance));
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else
                                                                                                                                                    {
                                                                                                                                                        if ("$type".Equals(r.Value))
                                                                                                                                                        {
                                                                                                                                                            System.Type _type = this.m_binder.BindToType("SanteDB.Core.Model, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                            if ((_type != typeof(SanteDB.Core.Model.Acts.SubstanceAdministration)))
                                                                                                                                                            {
                                                                                                                                                                SanteDB.Core.Model.Acts.SubstanceAdministration _nretVal = ((SanteDB.Core.Model.Acts.SubstanceAdministration)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                                _nretVal.CopyObjectData(_retVal);
                                                                                                                                                                return _nretVal;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        else
                                                                                                                                                        {
                                                                                                                                                            r.Skip();
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject)
                                && (r.Depth == _depth)))
                    {
                        return _retVal;
                    }
                    else
                    {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }

        /// <inheritdoc/>
        public object FromSimpleValue(object o)
        {
            return null;
        }

        /// <inheritdoc/>
        public object GetSimpleValue(object o)
        {
            return null;
        }
    }
}
